# Rbot Administration Cog
#
# This cog makes it possible to add any number of administrative functions to
# Rbots without exceeding the maximum hotkey limit.  Only the host machine may
# utilize this functionality.
#
# The host player may navigate through the available admin functions using the
# next/previous hotkeys and then use the execute hotkey to invoke the selected
# function.
#
# Note that the function cogs are indexed 0 to N-1 while they are identified as
# 1 to N in the output to the player.
#
# Implementing functions:
#
# By convention, admin functions intended to integrate with this cog should be
# named 'rbot-admin-*.cog'.  Such cogs must, at a minimum, implement the
# following messages:
#  * startup - Register one or more 'functions' with this cog by invoking the
#    user0 message.  Many cogs will implement only one function, but in some
#    cases it may be appropriate for a single cog to implement multiple
#    functions (e.g. to easily share state).  Therefore, this cog's user0
#    message will return a function ID that can be used to determine which
#    function is being invoked for any call.
#  * user0 - Execute function.  Param 0 will be the function ID returned during
#    registration of the function.
#  * user1 - Concatenate function description/state.  Param 0 will be the
#    function ID returned during registration of the function.  This is used
#    when the user is cycling through the available functions to display a
#    brief description and possibly state information (e.g. enabled/disabled).
#
# See also: rbot-admin-next.cog, rbot-admin-prev.cog
#
# Rbots originally created by Raynar

flags=0x240

symbols

message		activated
message		shutdown
message		user0
message		user1

int			func=0								local

int			maxfunc=0							local

cog			function0=-1						local
cog			function1=-1						local
cog			function2=-1						local
cog			function3=-1						local
cog			function4=-1						local
cog			function5=-1						local
cog			function6=-1						local
cog			function7=-1						local
cog			function8=-1						local
cog			function9=-1						local
cog			function10=-1						local
cog			function11=-1						local
cog			function12=-1						local
cog			function13=-1						local
cog			function14=-1						local
cog			function15=-1						local
cog			function16=-1						local
cog			function17=-1						local
cog			function18=-1						local
cog			function19=-1						local
cog			function20=-1						local
cog			function21=-1						local
cog			function22=-1						local
cog			function23=-1						local
cog			function24=-1						local
cog			function25=-1						local
cog			function26=-1						local
cog			function27=-1						local
cog			function28=-1						local
cog			function29=-1						local
cog			function30=-1						local
cog			function31=-1						local
cog			function32=-1						local
cog			function33=-1						local
cog			function34=-1						local
cog			function35=-1						local
cog			function36=-1						local
cog			function37=-1						local
cog			function38=-1						local
cog			function39=-1						local
cog			function40=-1						local
cog			function41=-1						local
cog			function42=-1						local
cog			function43=-1						local
cog			function44=-1						local
cog			function45=-1						local
cog			function46=-1						local
cog			function47=-1						local
cog			function48=-1						local
cog			function49=-1						local

end

code

activated:
	if (IsMulti() && !IsServer()) // Host only
	{
		Print("Only the host may access the Rbot administrative functions");
		return;
	}

	// Execute selected function
	SendMessageEx(function0[func-1], user0, func, -1, -1, -1);
	return;

shutdown:
	// Since this is an inventory cog, the symbols don't get reinitialized
	// between levels, so reset the function reference list when exiting a
	// level.  This cannot be reliably done in a startup message since startup
	// order may result in other cogs registering with this cog before the
	// startup message has been executed.
	maxfunc = 0;
	return;

// Register admin function
// Called from rbot-admin-*.cog files
// Returns the registered function ID
user0:
	function0[maxfunc] = GetSenderRef();
	maxfunc = maxfunc + 1;
	ReturnEx(maxfunc);
	return;

// Change function
// Called from rbot-admin-next.cog and rbot-admin-prev.cog
// Param 0 = 1 (next) or 0 (prev)
user1:
	if (IsMulti() && !IsServer()) // Host only
	{
		Print("Only the host may access the Rbot administrative functions");
		return;
	}

	if (GetParam(0))
	{
		func = func + 1; // Next
		if (func > maxfunc) func = 1; // Wrap from last to first
	}
	else
	{
		func = func - 1; // Previous
		if (func < 1) func = maxfunc; // Wrap from first to last
	}

	jkStringClear();
	jkStringConcatFormattedInt(func, "Rbot Admin - %d");
	jkStringConcatFormattedInt(maxfunc, "/%d - ");
	// Have the selected function append its state
	SendMessageEx(function0[func-1], user1, func, -1, -1, -1);
	jkStringOutput(-1, -1);
	return;

end
