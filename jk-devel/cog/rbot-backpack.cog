# Rbot Backpack Cog
#
# Type ID: 1050
#
# Rbots originally created by Raynar
# Additional code by Hell Raiser

symbols

message		touched
message		taken
message		removed
message		user7

sound		pickupsnd=BactaPu1.wav				local

# Backpacks
thing		backpack0=-1						local
thing		backpack1=-1						local
thing		backpack2=-1						local
thing		backpack3=-1						local
thing		backpack4=-1						local
thing		backpack5=-1						local
thing		backpack6=-1						local
thing		backpack7=-1						local
thing		backpack8=-1						local
thing		backpack9=-1						local

# Backpack data
# 10 backpacks * 11 items per backpack = 110 item var needed
int			item0								local
int			item1								local
int			item2								local
int			item3								local
int			item4								local
int			item5								local
int			item6								local
int			item7								local
int			item8								local
int			item9								local
int			item10								local
int			item11								local
int			item12								local
int			item13								local
int			item14								local
int			item15								local
int			item16								local
int			item17								local
int			item18								local
int			item19								local
int			item20								local
int			item21								local
int			item22								local
int			item23								local
int			item24								local
int			item25								local
int			item26								local
int			item27								local
int			item28								local
int			item29								local
int			item30								local
int			item31								local
int			item32								local
int			item33								local
int			item34								local
int			item35								local
int			item36								local
int			item37								local
int			item38								local
int			item39								local
int			item40								local
int			item41								local
int			item42								local
int			item43								local
int			item44								local
int			item45								local
int			item46								local
int			item47								local
int			item48								local
int			item49								local
int			item50								local
int			item51								local
int			item52								local
int			item53								local
int			item54								local
int			item55								local
int			item56								local
int			item57								local
int			item58								local
int			item59								local
int			item60								local
int			item61								local
int			item62								local
int			item63								local
int			item64								local
int			item65								local
int			item66								local
int			item67								local
int			item68								local
int			item69								local
int			item70								local
int			item71								local
int			item72								local
int			item73								local
int			item74								local
int			item75								local
int			item76								local
int			item77								local
int			item78								local
int			item79								local
int			item80								local
int			item81								local
int			item82								local
int			item83								local
int			item84								local
int			item85								local
int			item86								local
int			item87								local
int			item88								local
int			item89								local
int			item90								local
int			item91								local
int			item92								local
int			item93								local
int			item94								local
int			item95								local
int			item96								local
int			item97								local
int			item98								local
int			item99								local
int			item100								local
int			item101								local
int			item102								local
int			item103								local
int			item104								local
int			item105								local
int			item106								local
int			item107								local
int			item108								local
int			item109								local

# Transient working vars
int			i									local
int			offset								local
thing		player								local
thing		backpack							local
int			autopickup=0						local
int			autoselect_weapon=-1				local

end

code

touched:
	backpack = GetSenderRef();
	player = GetSourceRef();
	if (GetThingHealth(player) > 0) TakeItem(backpack, player);
	Return;

taken:
	backpack = GetSenderRef();
	player = GetSourceRef();

	jkPrintUNIString(player, 200);

	// Do effects.
	PlaySoundLocal(pickupsnd, 1, 0, 0);
	AddDynamicTint(player, 0.0, 0.0, 0.2);

	// Pickup the backpack
	call pickup_backpack;

	// New ammo is already assigned, so this is like a autopickup/autoreload mix,
	// it will select the best weapon overall with all the stuff in the backpack
	// taken into account.

	autopickup = GetAutoPickup();
	autoselect_weapon = AutoSelectWeapon(player, 0);

	if(autopickup & 1)
	{
		if( !((autopickup & 2) && ((autoselect_weapon == 4) || (autoselect_weapon == 8) || (autoselect_weapon == 9)) ))
		{
			if(!((autopickup & 4) && (GetWeaponPriority(player, GetCurWeapon(player), 0) >= GetWeaponPriority(player, autoselect_weapon, 0) )))
			{
				if(!((autopickup & 8) && (GetCurWeapon(player) == 10)))
				{
					SelectWeapon(player, autoselect_weapon);
					Return;
				}
			}
		}
	}

	Return;

removed:
	// Clear stored backpack data, backpack was picked up or timed out and is being removed
	backpack = GetSenderRef();
	player = -1; // no one is picking up this backpack

	// Clear backpack data slot
	call pickup_backpack;

	return;

// Execute public API function for this cog
// Param 0 = Function ID
// The remaining params will be processed according to the requested function
// For example, param1 might be an index into an array.
// Returns the function-specific result of the execution
user7:
	if (GetParam(0) == 10502010) // fill backpack
	{
		backpack = GetParam(1);
		player = GetParam(2);

		call fill_backpack;

		ReturnEx(0);
		return;
	}

	if (GetParam(0) == 10502020) // pickup backpack
	{
		backpack = GetParam(1);
		player = GetParam(2);

		call pickup_backpack;

		TakeItem(backpack, player);
		ReturnEx(0);
		return;
	}

	// Report error if function ID does not match anything above
	jkStringClear();
	jkStringConcatFormattedInt(GetSenderRef(), "rbot-backpack.cog :: ERROR :: Cog %d");
	jkStringConcatFormattedInt(GetParam(0), " has requested an invalid function ID, %d");
	jkStringOutput(-1, -1);
	return;

# Params: backpack, player
fill_backpack:
	for (i = 0 ; i < 10 ; i = i + 1)
	{
		if (backpack0[i] == -1 || backpack0[i] == backpack) // found free slot to store the backpack data
		{
			backpack0[i] = backpack; // reserve data slot for this backpack
			offset = i * 11;

			if (player != -1)
			{
				if (GetThingType(player) == 2) // bot
				{
					item0[offset]    = SendMessageEx(GetThingClassCog(player), user7, 10231006, 2, -1, -1);  // bryar
					item0[offset+1]  = SendMessageEx(GetThingClassCog(player), user7, 10231006, 3, -1, -1);  // strifle
					item0[offset+2]  = SendMessageEx(GetThingClassCog(player), user7, 10231006, 4, -1, -1);  // thermal detonators
					item0[offset+3]  = SendMessageEx(GetThingClassCog(player), user7, 10231006, 5, -1, -1);  // bowcaster
					item0[offset+4]  = SendMessageEx(GetThingClassCog(player), user7, 10231006, 6, -1, -1);  // repeater
					item0[offset+5]  = SendMessageEx(GetThingClassCog(player), user7, 10231006, 7, -1, -1);  // raildet
					item0[offset+6]  = SendMessageEx(GetThingClassCog(player), user7, 10231006, 8, -1, -1);  // sequencer charges
					item0[offset+7]  = SendMessageEx(GetThingClassCog(player), user7, 10231006, 9, -1, -1);  // concrifle
					item0[offset+8]  = SendMessageEx(GetThingClassCog(player), user7, 10231002, -1, -1, -1); // energy
					item0[offset+9]  = SendMessageEx(GetThingClassCog(player), user7, 10231003, -1, -1, -1); // power
					item0[offset+10] = SendMessageEx(GetThingClassCog(player), user7, 10231005, -1, -1, -1); // rail charges
				}

				if (GetThingType(player) == 10) // player
				{
					item0[offset]    = GetInv(player, 2);  // bryar
					item0[offset+1]  = GetInv(player, 3);  // strifle
					item0[offset+2]  = GetInv(player, 4);  // thermal detonators
					item0[offset+3]  = GetInv(player, 5);  // bowcaster
					item0[offset+4]  = GetInv(player, 6);  // repeater
					item0[offset+5]  = GetInv(player, 7);  // raildet
					item0[offset+6]  = GetInv(player, 8);  // sequencer charges
					item0[offset+7]  = GetInv(player, 9);  // concrifle
					item0[offset+8]  = GetInv(player, 11); // energy
					item0[offset+9]  = GetInv(player, 12); // power
					item0[offset+10] = GetInv(player, 15); // rail charges
				}
			}

			return;
		}
	}
	return;

# Params: backpack, player
pickup_backpack:
	for (i = 0 ; i < 10 ; i = i + 1)
	{
		if (backpack0[i] == backpack) // found the slot containing the backpack data
		{
			backpack0[i] = -1; // clear data slot so another backpack can use it
			offset = i * 11;

			if (player != -1)
			{
				if (GetThingType(player) == 2) // bot
				{
					SendMessageEx(GetThingClassCog(player), user7, 10232506, 2, item0[offset], -1);     // bryar
					SendMessageEx(GetThingClassCog(player), user7, 10232506, 3, item0[offset+1], -1);   // strifle
					SendMessageEx(GetThingClassCog(player), user7, 10232506, 4, item0[offset+2], -1);   // thermal detonators
					SendMessageEx(GetThingClassCog(player), user7, 10232506, 5, item0[offset+3], -1);   // bowcaster
					SendMessageEx(GetThingClassCog(player), user7, 10232506, 6, item0[offset+4], -1);   // repeater
					SendMessageEx(GetThingClassCog(player), user7, 10232506, 7, item0[offset+5], -1);   // raildet
					SendMessageEx(GetThingClassCog(player), user7, 10232506, 8, item0[offset+6], -1);   // sequencer charges
					SendMessageEx(GetThingClassCog(player), user7, 10232506, 9, item0[offset+7], -1);   // concrifle
					SendMessageEx(GetThingClassCog(player), user7, 10232502, item0[offset+8], -1, -1);  // energy
					SendMessageEx(GetThingClassCog(player), user7, 10232503, item0[offset+9], -1, -1);  // power
					SendMessageEx(GetThingClassCog(player), user7, 10232505, item0[offset+10], -1, -1); // rail charges
				}

				if (GetThingType(player) == 10) // player
				{
					ChangeInv(player, 2,  item0[offset]);    // bryar
					ChangeInv(player, 3,  item0[offset+1]);  // strifle
					ChangeInv(player, 4,  item0[offset+2]);  // thermal detonators
					ChangeInv(player, 5,  item0[offset+3]);  // bowcaster
					ChangeInv(player, 6,  item0[offset+4]);  // repeater
					ChangeInv(player, 7,  item0[offset+5]);  // raildet
					ChangeInv(player, 8,  item0[offset+6]);  // sequencer charges
					ChangeInv(player, 9,  item0[offset+7]);  // concrifle
					ChangeInv(player, 11, item0[offset+8]);  // energy
					ChangeInv(player, 12, item0[offset+9]);  // power
					ChangeInv(player, 15, item0[offset+10]); // rail charges
				}
			}

			return;
		}
	}
	return;

end
