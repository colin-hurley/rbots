# Rbots Elevator
#
# This is a generic elevator for use with Rbots.  Most common features are
# supported, including:
# * Automatically move elevator by walking on it
# * Automatically call elevator by entering a sector, walking on a surface, or
#   crossing an adjoin
# * Elevator call buttons
# * Automatically return elevator to bottom frame
#
# Rbots originally created by Raynar

symbols

message trigger
message activated
message entered
message touched
message crossed
message arrived
message blocked
message timer

# This is the elevator.
thing elevator mask=0x405 linkid=1

# When a player/bot enters one of these sectors and the elevator is at its
# bottom frame, it will be moved to its top frame to meet the player/bot.
# These values are optional.
sector top_sector0 mask=0x405 linkid=2
sector top_sector1 mask=0x405 linkid=2
sector top_sector2 mask=0x405 linkid=2
sector top_sector3 mask=0x405 linkid=2

# These surfaces can either be adjoins to be crossed or floor surfaces to be
# walked on.  When a player/bot crosses or walks on one of these surfaces and
# the elevator is at its bottom frame, it will be moved to its top frame to
# meet the player/bot.
# These values are optional.
surface top_surface0 mask=0x405 linkid=2
surface top_surface1 mask=0x405 linkid=2
surface top_surface2 mask=0x405 linkid=2
surface top_surface3 mask=0x405 linkid=2

# When a player/bot enters one of these sectors and the elevator is at its
# top frame, it will be moved to its bottom frame to meet the player/bot.
# These values are optional.
sector bottom_sector0 mask=0x405 linkid=3
sector bottom_sector1 mask=0x405 linkid=3
sector bottom_sector2 mask=0x405 linkid=3
sector bottom_sector3 mask=0x405 linkid=3

# These surfaces can either be adjoins to be crossed or floor surfaces to be
# walked on.  When a player/bot crosses or walks on one of these surfaces and
# the elevator is at its top frame, it will be moved to its bottom frame to
# meet the player/bot.
# These values are optional.
surface bottom_surface0 mask=0x405 linkid=3
surface bottom_surface1 mask=0x405 linkid=3
surface bottom_surface2 mask=0x405 linkid=3
surface bottom_surface3 mask=0x405 linkid=3

# When a player activates one of these buttons, the elevator will move to its
# opposite frame.
# These values are optional.
surface call_button0 linkid=4
surface call_button1 linkid=4
surface call_button2 linkid=4
surface call_button3 linkid=4

# The normal movement speed of the elevator.  This will be scaled up in some
# situations to assist bot navigation.
flex speed=4.0

# When the elevator is walked on, it will start moving after this delay.  If
# this value is zero, the elevator will start moving immediately.
flex start_wait=0.0

# When the elevator reaches its top frame, it will automatically return to its
# bottom frame after this delay.  If this value is zero, the elevator will not
# automatically return to its bottom frame.
flex return_delay=0.0

# When one of the call buttons are activated, play this sound at the button's
# location.
sound call_button_activate=lvrclik1.wav

# Working variables
int i local
flex speed_scale local
thing rbot local
flex dist local
surface call_button local

end

# ========================================================================================

code

trigger:
	if (GetSourceRef() == 11030) // "activate" trigger
	{
		rbot = GetParam(1);
		for (i = 0 ; i < 4 ; i = i + 1)
		{
			call_button = call_button0[i];
			if (call_button != -1)
			{
				dist = VectorDist(GetThingPos(rbot), SurfaceCenter(call_button));
				if (dist < 0.5) // if bot is close enough, activate call button
				{
					goto do_activated; // use do_activated to skip sender id check in activated
				}
			}
		}
	}
	return;

activated:
	if (GetSenderId() != 4) return;
	call_button = GetSenderRef();

do_activated:
	if (IsThingMoving(elevator)) return;

	PlaySoundPos(call_button_activate, SurfaceCenter(call_button), 1, -1, -1, 0);
	speed_scale = 1.0;
	call move_elev;
	return;

entered:
	if (IsThingMoving(elevator)) return;

	// if elevator was walked on
	if (GetSenderId() == 1) goto touched;

	// else sector was entered or surface was walked on
	else goto do_crossed; // use do_crossed to skip start wait in crossed (i.e. move elevator immediately)

	return;

touched:
	// When elevator is walked on, wait a moment before moving it
	if (start_wait > 0) Sleep(start_wait);

	if (IsThingMoving(elevator)) return;

	speed_scale = 1.0;
	call move_elev;
	return;

crossed:
	// When adjoin is crossed, wait a moment before moving the elevator
	if (start_wait > 0) Sleep(start_wait);

do_crossed:
	if (IsThingMoving(elevator)) return;

	// if entering from the top and elevator is at the bottom
	if (GetSenderId() == 2 && GetCurFrame(elevator) == 0) {
		speed_scale = 1.0;
		if (GetThingType(GetSourceRef()) == 2) speed_scale = 2.0; // Move faster to meet bot
		call move_elev;
		return;
	}

	// if entering from the bottom and elevator is at the top
	if (GetSenderId() == 3 && GetCurFrame(elevator) == 1) {
		speed_scale = 1.0;
		if (GetThingType(GetSourceRef()) == 2) speed_scale = 2.0; // Move faster to meet bot
		call move_elev;
		return;
	}

	return;

arrived:
	// Deactivate wall switches
	for (i = 0 ; i < 4 ; i = i + 1) {
		if (i != -1) SetWallCel(call_button0[i], 0);
	}

	// Auto-return the elevator to its bottom frame after a short delay
	if (GetCurFrame(elevator) == 1 && return_delay > 0) {
		SetTimerEx(return_delay, 10, -1, -1);
	}
	return;

blocked:
	// If something is in the way, move the elevator back to its previous location
	MoveToFrame(elevator, 1 - GetGoalFrame(elevator), speed);
	return;

timer:
	if (GetSenderId() == 10) {
		// Time for the elevator to auto-return to its lower frame
		call move_elev;
	}
	return;

move_elev:
	// Cancel any pending auto-return timers
	KillTimerEx(10);

	// Activate wall switches
	for (i = 0 ; i < 4 ; i = i + 1) {
		if (i != -1) SetWallCel(call_button0[i], 1);
	}
	// Move the elevator to its opposite location
	MoveToFrame(elevator, 1 - GetCurFrame(elevator), speed * speed_scale);
	return;

end
