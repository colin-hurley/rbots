# Rbot Server Cog - Weapons (JK variant)
#
# Server-only
# Type ID: 1023
#
# Rbots originally created by Raynar
# Additional code by Hell Raiser

flags=0x40

symbols

message		startup
message		damaged
message		blocked
message		trigger
message		timer
message		skill
message		user7

int			botid=0

thing		rbot=-1								local
int			weaponmode							local

cog			system=-1							local
cog			skin=-1								local

# Weapon fire projectiles
template	projectile_weap00=+rbotsaber		local
template	projectile_weap00a=+rbotsaber2		local
template	projectile_weap01=+punch			local
template	projectile_weap02=+bryarbolt		local
template	projectile_weap03=+stlaser			local
#template	projectile_weap05=+crossbowbolt		local
#template	projectile_weap05a=+crossbowbolt2	local
template	projectile_weap05b=+crossbowbolt3	local
template	projectile_weap06=+repeaterball		local
template	projectile_weap07=+raildet			local
template	projectile_weap07a=+raildet2		local
#template	projectile_weap08=+seqchrg			local
template	projectile_weap08a=+seqchrg2		local
template	projectile_weap09=+concbullet		local
template	projectile_weap09a=+concblast2		local

# Projectiles to jump away from with saber
#template	dproj0=+raildet						local
#template	dproj1=+concbullet					local

# Weapon sounds
sound		mountSoundgun0=df_bry_ready.wav		local
sound       mountSoundgun1=df_rif_ready.wav		local
sound		mountSoundgun2=RailChargeArm01.WAV	local
sound		mountSoundsaber=LtSaberOn01.WAV		local
sound		dismountSoundsaber=LtSaberOff01.WAV	local
sound		humSound01=LtSaberLp01.WAV			local

# Weapon fire sounds
sound		snd_fireweap01=SwingFist01.wav		local
sound		snd_fireweap01a=SwingFist04.wav		local
sound		snd_fireweap02=pistol-1.wav			local
sound		snd_fireweap03=trprsht2.wav			local
#sound		snd_fireweap05=BCFire01.wav			local
sound		snd_fireweap05a=BCFire02.wav		local
sound		snd_fireweap06=rpeatrlp.wav			local
#sound		snd_fireweap06a=repeat-1.wav		local
sound		snd_fireweap07=RailChargeFire01.WAV	local
sound		snd_fireweap09=concuss5.wav			local

# Saber attack sounds
sound		swingSound0=LtSaberSwing01.WAV		local
sound		swingSound1=LtSaberSwing02.WAV		local
sound		swingSound2=LtSaberSwing03.WAV		local
sound		swingSound3=LtSaberSwing04.WAV		local
sound		swingSound4=LtSaberSwing05.WAV		local
sound		swingSound5=LtSaberSwing06.WAV		local
sound		swingSound6=LtSaberSwing07.WAV		local
sound		swingSound7=LtSaberSwing08.WAV		local
sound		swingSoundDbl01=LtSaberSwingDbl01.WAV	local

# Saber attack animation
keyframe	fireAnimR1=KYsabrr1.key				local
keyframe	fireAnimL1=KYsabrl1.key				local
#keyframe	fireAnimB1=KYsabrb1.key				local
#keyframe	fireAnimB2=KYsabrb2.key				local
keyframe	fireAnimF1=KYsnap1.key				local
keyframe	fireAnimF2=KYsnap2.key				local
keyframe	snapAnim0=KYsabrf1.key				local
keyframe	snapAnim1=KYsabrf2.key				local
keyframe	snapAnim2=KYsabrf1.key				local
keyframe	chargeAnim=KYcharge.key				local

# Saber block animation
keyframe    blockAnim0=KYblock0.key				local
keyframe    blockAnim1=KYblock1.key				local
keyframe    blockAnim2=KYblock2.key				local

# Item templates
template	tmp_energycell=ENERGYCELL			local
template	tmp_powercell=POWERCELL				local
template	tmp_railcharges=RAILCHARGES			local
template	tmp_powerboost=POWERBOOST			local
template	tmp_weap2=bryarpistol				local
template	tmp_weap3=STRIFLE					local
template	tmp_weap4=DETONATOR					local
template	tmp_weap5=CROSSBOW					local
template	tmp_weap6=REPEATERGUN				local
template	tmp_weap7=RAILGUN					local
template	tmp_weap8=SEQCHARGE					local
template	tmp_weap9=CONCRIFLE					local
template	tmp_weap4x1=singledetonator			local
template	tmp_weap8x1=singleseqcharge			local

# Force-pulled weapon templates
template	tmp_fpweap2=+FPBryarPistol			local
template	tmp_fpweap3=+FPSTrifle				local
template	tmp_fpweap4=+FPDetonator			local
template	tmp_fpweap5=+FPCrossbow				local
template	tmp_fpweap6=+FPRepeaterGun			local
template	tmp_fpweap7=+FPRailGun				local
template	tmp_fpweap8=+FPSeqCharge			local
template	tmp_fpweap9=+FPConcRifle			local

# Inventory items
int			inv_energy							local
int			inv_power							local
int			inv_railcharges						local
int			inv_weap0							local desc=saber_unlit
int			inv_weap1							local desc=fists
int			inv_weap2							local desc=bryar
int			inv_weap3							local desc=st_rifle
int			inv_weap4							local desc=therm_det
int			inv_weap5							local desc=crossbow
int			inv_weap6							local desc=repeater
int			inv_weap7							local desc=railgun
int			inv_weap8							local desc=seq_charges
int			inv_weap9							local desc=conc_rifle
int			inv_weap10							local desc=saber_lit

# Misc
int			gamemode							local
int			difficulty							local
thing		target=-1							local
int			powerboost							local
int			humChannel=-1						local
int			blocktrack=-1						local
int			nextblock=0							local
int			nextanim=0							local
int			slash=0								local
int			curweap								local

# Transient working vars
vector		tempvector1							local
flex		tempflex1							local
int			special								local
int			mode								local
flex		damage								local
flex		dot									local
thing		item								local
int			priority							local
int			targweap							local
flex		disttotarg							local
int			slashsound							local

end

code

startup:
	if (IsMulti() && !IsServer()) return; // Host only

	// Allow other server-side cogs to discover this one by its type
	SendTrigger(-1, 1852000, 1023, GetSelfCog(), botid, -1);

	return;

damaged:
	damage = GetParam(0);
	#damagetype= GetParam(1);
	#damager = GetParam(2);

	// No special damage handling implemented here

	ReturnEx(damage);
	return;

blocked:
	if (blocktrack != -1)
	{
		StopKey(rbot, blocktrack, 0.1);
		KillTimerEx(450); // cancel timer to clear blocktrack
		blocktrack = -1;
	}
	// Play saber block animation
	blocktrack = PlayKey(rbot, blockAnim0[nextblock], 2, 0x1a);
	SetTimerEx(GetKeyLen(blockAnim0[nextblock]), 450, -1, -1); // Clear blocktrack after the animation is complete
	nextblock = (nextblock + 1) % 3;
	return;

trigger:
	if (IsMulti() && !IsServer()) return; // Host only

	if (GetSourceRef() == 1852000) // Rbot cog type discovery
	{
		if (GetParam(0) == 1010) // rbot-startup.cog
		{
			system = GetParam(1);
		}
		return;
	}

	if (GetSourceRef() == 800) // game setup options
	{
		gamemode = GetParam(0);
		difficulty = GetParam(1);
		return;
	}

	if (GetParam(0) != botid) return; // not for this bot

	if (GetSourceRef() == 11020) // Received special info
	{
		special = GetParam(1);
		mode = GetParam(2);
		if (mode && BitTest(special, 0x10)) // Bot can lay a mine here
		{
			if (inv_weap8 > 0 && target == -1) // The bot has ammo and not already attacking a target
			{
				// lay a mine (secondary fire)
				call use_weap8;
			}
		}
		return;
	}

	return;

timer:
	if (GetSenderId() == 120) // weapon cooldown complete
	{
		weaponmode = BitClear(weaponmode, 0x1); // weapon cooldown
		call attacktarget;
		return;
	}

	if (GetSenderId() == 150) // after powerboost
	{
		powerboost = 1;
		return;
	}

	if (GetSenderId() == 160) // Bot killed with saber lit, do saber dismount effects
	{
		call deselect_curweap;
		return;
	}

	if (GetSenderId() == 200) // fire projectile to simulate a saber swing
	{
		FireProjectile(rbot, GetParam(0), -1, -1, '0 0 0', '0 0 0', 0.0, 0x0, 0, 0);
		return;
	}

	if (GetSenderId() == 450) // block animation complete
	{
		blocktrack = -1;
		return;
	}

	return;

skill:
	// No weapon effects implemented in JK
	ReturnEx(-1);
	return;

// Execute public API function for this cog
// Param 0 = Function ID
// The remaining params will be processed according to the requested function
// For example, param1 might be an index into an array.
// Returns the function-specific result of the execution
user7:
	if (GetParam(0) == 10231001) { ReturnEx(weaponmode); return; }
	if (GetParam(0) == 10231002) { ReturnEx(inv_energy); return; }
	if (GetParam(0) == 10231003) { ReturnEx(inv_power); return; }
	if (GetParam(0) == 10231005) { ReturnEx(inv_railcharges); return; }
	if (GetParam(0) == 10231006) { ReturnEx(inv_weap0[GetParam(1)]); return; }
	if (GetParam(0) == 10231007) { ReturnEx(powerboost); return; }
	if (GetParam(0) == 10231014) { ReturnEx(curweap); return; }

	if (GetParam(0) == 10232010) { target = GetParam(1); return; }

	if (GetParam(0) == 10232502) // add energy
	{
		inv_energy = inv_energy + GetParam(1);
		if (inv_energy > 500) inv_energy = 500;
		return;
	}

	if (GetParam(0) == 10232503) // add power
	{
		inv_power = inv_power + GetParam(1);
		if (inv_power > 500) inv_power = 500;
		return;
	}

	if (GetParam(0) == 10232505) // add rail charges
	{
		inv_railcharges = inv_railcharges + GetParam(1);
		if (inv_railcharges > 30) inv_railcharges = 30;
		return;
	}

	if (GetParam(0) == 10232506) // add weapons
	{
		if (GetParam(1) == 4)
		{
			inv_weap4 = inv_weap4 + GetParam(2);
			if (inv_weap4 > 30) inv_weap4 = 30;
			return;
		}

		if (GetParam(1) == 8)
		{
			inv_weap8 = inv_weap8 + GetParam(2);
			if (inv_weap8 > 30) inv_weap8 = 30;
			return;
		}

		if (GetParam(2)) inv_weap0[GetParam(1)] = 1;
		return;
	}

	if (GetParam(0) == 10233000) // bot AI pulse
	{
		call attacktarget; // start attacking if we haven't already
		return;
	}

	if (GetParam(0) == 10233003) // force pull used against bot
	{
		item = -1;
		if (1 < curweap && curweap != 10) // don't force pull fists or saber
		{
			if (inv_weap0[curweap] > 0) // bot has weapon/ammo
			{
				// Remove the weapon from the bot and create a powerup corresponding to the current weapon
				inv_weap0[curweap] = inv_weap0[curweap] - 1;
				item = CreateThingAtPos(tmp_fpweap2[curweap-2], GetThingSector(rbot), GetThingPos(rbot), '0 0 0');
				call use_weap1; // Select fists
			}
		}
		ReturnEx(item); // return the powerup
		return;
	}

	if (GetParam(0) == 10233005) // bot respawned
	{
		rbot = GetParam(1);
		skin = GetParam(2);

		inv_weap0 = 1; // saber unlit
		inv_weap1 = 1; // fists
		inv_weap2 = 1; // bryar
		inv_weap3 = 0; // strifle
		inv_weap4 = 0; // thermal dets
		inv_weap5 = 0; // bowcaster
		inv_weap6 = 0; // repeater
		inv_weap7 = 0; // raildet
		inv_weap8 = 0; // sequencers
		inv_weap9 = 0; // concrifle
		inv_weap10 = 1; // saber lit
		inv_energy = 50;
		inv_power = 0;
		inv_railcharges = 0;
		powerboost = 1; // normal fire rate
		curweap = 0;
		weaponmode = 0x0;

		return;
	}

	if (GetParam(0) == 10233006) // bot killed
	{
		if (curweap == 10) // current weapon is saber
		{
			// The bot died with the saber selected, stop the saber weapon effects
			// For some reason, trying to do this in the killed/damaged message directly does not work (the saber dismount
			// sound doesn't play), but doing it in a timer shortly after the bot dies does work.  Adding the 0x100 flag
			// doesn't help.  Maybe the sound is conflicting with the bot's soundclass death sound?
			SetTimerEx(0.05, 160, -1, -1);
		}

		ReturnEx(0);
		return;
	}

	if (GetParam(0) == 10233007) // stop AI processes
	{
		KillTimerEx(120); // weapon cooldown
		KillTimerEx(150); // powerboost
		KillTimerEx(200); // saber attack
		ReturnEx(0);
		return;
	}

	if (GetParam(0) == 10233010) // get item priority
	{
		item = GetParam(1);
		priority = GetParam(2);
		if (BitTest(gamemode, 0x1)) // allow guns
		{
			// Weapons
			if ((GetThingTemplate(item) == tmp_weap2 && !inv_weap2) || (GetThingTemplate(item) == tmp_fpweap2 && !inv_weap2) || (GetThingTemplate(item) == tmp_weap3 && !inv_weap3) || (GetThingTemplate(item) == tmp_fpweap3 && !inv_weap3) || (GetThingTemplate(item) == tmp_weap5 && !inv_weap5) || (GetThingTemplate(item) == tmp_fpweap5 && !inv_weap5) || (GetThingTemplate(item) == tmp_weap6 && !inv_weap6) || (GetThingTemplate(item) == tmp_fpweap6 && !inv_weap6) || (GetThingTemplate(item) == tmp_weap7 && !inv_weap7) || (GetThingTemplate(item) == tmp_fpweap7 && !inv_weap7) || (GetThingTemplate(item) == tmp_weap9 && !inv_weap9) || (GetThingTemplate(item) == tmp_fpweap9 && !inv_weap9)) priority = 6;

			// Ammo
			if ((GetThingTemplate(item) == tmp_energycell && inv_energy < 100) || (GetThingTemplate(item) == tmp_powercell && inv_power < 100) || (GetThingTemplate(item) == tmp_railcharges && inv_railcharges < 10)) priority = 5;

			// TDs and sequencers
			if ((GetThingTemplate(item) == tmp_weap4 && inv_weap4 < 6) || (GetThingTemplate(item) == tmp_weap4x1 && inv_weap4 < 6) || (GetThingTemplate(item) == tmp_fpweap4 && inv_weap4 < 6) || (GetThingTemplate(item) == tmp_weap8 && inv_weap8 < 5) || (GetThingTemplate(item) == tmp_weap8x1 && inv_weap8 < 5) || (GetThingTemplate(item) == tmp_fpweap8 && inv_weap8 < 5)) priority = 4;
		}
		ReturnEx(priority);
		return;
	}

	if (GetParam(0) == 10233020) // pickup item
	{
		item = GetParam(1);

		if (GetThingTemplate(item) == tmp_energycell)
		{
			if (inv_energy < 500)
			{
				inv_energy = inv_energy + 20;
				if (inv_energy > 500) inv_energy = 500;
				TakeItem(item, rbot); // bot picked up this item
			}
			return;
		}

		if (GetThingTemplate(item) == tmp_powercell)
		{
			if (inv_power < 500)
			{
				inv_power = inv_power + 25;
				if (inv_power > 500) inv_power = 500;
				TakeItem(item, rbot); // bot picked up this item
			}
			return;
		}

		if (GetThingTemplate(item) == tmp_weap4)
		{
			if (inv_weap4 < 30)
			{
				inv_weap4 = inv_weap4 + 3;
				if (inv_weap4 > 30) inv_weap4 = 30;
				TakeItem(item, rbot); // bot picked up this item
			}
			return;
		}
		if (GetThingTemplate(item) == tmp_weap4x1 || GetThingTemplate(item) == tmp_fpweap4)
		{
			if (inv_weap4 < 30)
			{
				inv_weap4 = inv_weap4 + 1;
				TakeItem(item, rbot); // bot picked up this item
			}
			return;
		}

		if (GetThingTemplate(item) == tmp_weap8)
		{
			if (inv_weap8 < 30)
			{
				inv_weap8 = inv_weap8 + 5;
				if (inv_weap8 > 30) inv_weap8 = 30;
				TakeItem(item, rbot); // bot picked up this item
			}
			return;
		}

		if (GetThingTemplate(item) == tmp_weap8x1 || GetThingTemplate(item) == tmp_fpweap8)
		{
			if (inv_weap8 < 30)
			{
				inv_weap8 = inv_weap8 + 1;
				TakeItem(item, rbot); // bot picked up this item
			}
			return;
		}

		if (GetThingTemplate(item) == tmp_railcharges)
		{
			if (inv_railcharges < 30)
			{
				inv_railcharges = inv_railcharges + 3;
				if (inv_railcharges > 30) inv_railcharges = 30;
				TakeItem(item, rbot); // bot picked up this item
			}
			return;
		}

		if (GetThingTemplate(item) == tmp_powerboost)
		{
			TakeItem(item, rbot); // bot picked up this item
			powerboost = 2;
			KillTimerEx(150);
			SetTimerEx(30, 150, -1, -1); // switch off in 30 secs
			return;
		}

		if (GetThingTemplate(item) == tmp_weap2 || GetThingTemplate(item) == tmp_fpweap2)
		{
			if (inv_weap2 == 0 || inv_energy < 500)
			{
				inv_weap2 = 1;
				inv_energy = inv_energy + 10;
				if (inv_energy > 500) inv_energy = 500;
				TakeItem(item, rbot); // bot picked up this item
			}
			return;
		}

		if (GetThingTemplate(item) == tmp_weap3 || GetThingTemplate(item) == tmp_fpweap3)
		{
			if (inv_weap3 == 0 || inv_energy < 500)
			{
				inv_weap3 = 1;
				inv_energy = inv_energy + 24;
				if (inv_energy > 500) inv_energy = 500;
				TakeItem(item, rbot); // bot picked up this item
			}
			return;
		}

		if (GetThingTemplate(item) == tmp_weap5 || GetThingTemplate(item) == tmp_fpweap5)
		{
			if (inv_weap5 == 0 || inv_power < 500)
			{
				inv_weap5 = 1;
				inv_power = inv_power + 16;
				if (inv_power > 500) inv_power = 500;
				TakeItem(item, rbot); // bot picked up this item
			}
			return;
		}

		if (GetThingTemplate(item) == tmp_weap6 || GetThingTemplate(item) == tmp_fpweap6)
		{
			if (inv_weap6 == 0 || inv_power < 500)
			{
				inv_weap6 = 1;
				inv_power = inv_power + 24;
				if (inv_power > 500) inv_power = 500;
				TakeItem(item, rbot); // bot picked up this item
			}  
			return;
		}

		if (GetThingTemplate(item) == tmp_weap7 || GetThingTemplate(item) == tmp_fpweap7)
		{
			if (inv_weap7 == 0 || inv_railcharges < 30)
			{
				inv_weap7 = 1;
				inv_railcharges = inv_railcharges + 6;
				if (inv_railcharges > 30) inv_railcharges = 30;
				TakeItem(item, rbot); // bot picked up this item
			}
			return;
		}

		if (GetThingTemplate(item) == tmp_weap9 || GetThingTemplate(item) == tmp_fpweap9)
		{
			if (inv_weap9 == 0 || inv_power < 500)
			{
				inv_weap9 = 1;
				inv_power = inv_power + 32;
				if (inv_power > 500) inv_power = 500;
				TakeItem(item, rbot); // bot picked up this item
			}
			return;
		}

		ReturnEx(0);
		return;
	}

	if (GetParam(0) == 10233030) // get target priority
	{
		#potential = GetParam(1);
		priority = GetParam(2);
		// No priority adjustments implemented yet...
		ReturnEx(priority);
		return;
	}

	if (GetParam(0) == 10233050) // decide whether to move toward target
	{
		target = GetParam(1);
		// Get the current weapon of our target
		targweap = 0;
		if (SendMessageEx(system, user7, 10103000, target, -1, -1) != -1) // target is a bot
		{
			targweap = SendMessageEx(GetThingClassCog(target), user7, 10231014, -1, -1, -1);
		}
		if (GetThingType(target) == 10) // target is a player
		{
			targweap = GetCurWeapon(target);
		}
		if ((curweap == 2 && targweap > 2 && difficulty >= 1) || ((targweap == 7 || targweap == 9) && curweap < 6 && difficulty >= 2)) // Need a better weapon
		{
			// Bot is outmatched because target has a better weapon, keep moving until bot finds a better weapon
			ReturnEx(0);
			return;
		}
		ReturnEx(1);
		return;
	}

	// Report error if function ID does not match anything above
	jkStringClear();
	jkStringConcatFormattedInt(GetSenderRef(), "rbot-srv-weapons.cog :: ERROR :: Cog %d");
	jkStringConcatFormattedInt(GetParam(0), " has requested an invalid function ID, %d");
	jkStringOutput(-1, -1);
	return;

attacktarget:
	if (BitTest(weaponmode, 0x1)) return; // can't attack during cooldown

	if (rbot == -1 || GetThingHealth(rbot) <= 0 || GetDebugModeFlags() & 0x1 || AIGetMode(rbot) & 0x2000 || GetActorFlags(rbot) & 0x200000) // bot dead or frozen or AI disabled
	{
		return;
	}

	// Determine how far away the target is
	disttotarg = 0;
	if (target != -1) disttotarg = VectorDist(GetThingPos(rbot), GetThingPos(target));

	// Lead distance
	#if (difficulty == 4)
	#{
	#	// FIXME: projectile_weap00[curweap] does not retrieve the correct template (some weapons have two templates, so the index by weapon number is not accurate)
	#	dummyproj = FireProjectile(rbot, projectile_weap00[curweap], -1, -1, '0 0 0', '0 0 0', 1.0, 0x0, 0, 0);
	#	targetvel = GetThingVel(target);
	#	speed = VectorDist('0 0 0', VectorSub(GetThingVel(dummyproj), targetvel));
	#	DestroyThing(dummyproj);
	#	distance = VectorDist(GetThingPos(target), GetThingPos(rbot));
	#	time = distance / speed;
	#	AiSetLookPos(rbot, VectorAdd(GetThingPos(target), VectorScale(targetvel, time)));
	#}

	tempvector1 = VectorSet((Rand()-0.5)*(4-difficulty)*2, (Rand()-0.5)*(4-difficulty)*2, 0); // set accuracy based on difficulty

	if (!BitTest(gamemode, 0x1)) // no guns
	{
		if (BitTest(gamemode, 0x2)) goto use_weap10; // sabers only
		goto use_weap1; // fists only
	}

	// Select best weapon based on difficulty
	if (difficulty < 3 || target == -1) // use the biggest gun on lower difficulties or if bot has no target
	{
		if (inv_weap9 == 1 && inv_power > 7)
		{
			goto use_weap9;
		}
		if (inv_weap7 == 1 && inv_railcharges > 0)
		{
			goto use_weap7;
		}
		if (inv_weap6 == 1 && inv_power > 0)
		{
			goto use_weap6;
		}
		if (inv_weap5 == 1 && inv_power > 1)
		{
			goto use_weap5;
		}
		if (inv_weap3 == 1 && inv_energy > 1)
		{
			goto use_weap3;
		}
		if (inv_weap2 == 1 && inv_energy > 0)
		{
			goto use_weap2;
		}
	}
	else // On higher difficulties, make smarter gun selection choices
	{
		// Get the current weapon of our target
		targweap = 0;
		if (SendMessageEx(system, user7, 10103000, target, -1, -1) != -1) // target is a bot
		{
			targweap = SendMessageEx(GetThingClassCog(target), user7, 10231014, -1, -1, -1);
		}
		if (GetThingType(target) == 10) // target is a player
		{
			targweap = GetCurWeapon(target);
		}

		// We don't want to use explosive weapons at very close range
		if (disttotarg > 0.4)
		{
			if (inv_weap9 == 1 && inv_power > 7)
			{
				goto use_weap9;
			}
			if (inv_weap7 == 1 && inv_railcharges > 0)
			{
				goto use_weap7;
			}
		}

		// We don't want to fight the target bot with energy bullets at close range if the target can block them with a saber
		if (disttotarg < 0.9 && targweap == 10 && BitTest(gamemode, 0x2)) // target is using saber and bot is allowed to use a saber
		{
			goto use_weap10; // enemy saber can block energy weapons, use saber to attack
		}

		if (inv_weap6 == 1 && inv_power > 0)
		{
			goto use_weap6;
		}
		if (inv_weap5 == 1 && inv_power > 1)
		{
			goto use_weap5;
		}
		if (inv_weap3 == 1 && inv_energy > 1)
		{
			goto use_weap3;
		}
		if (inv_weap2 == 1 && inv_energy > 0)
		{
			goto use_weap2;
		}
	}

	// No appropriate guns to use, choice is now between saber and fists
	if (BitTest(gamemode, 0x2)) // sabers allowed
	{
		goto use_weap10; // prefer saber over fists
	}

	goto use_weap1; // no other option available, select fists

	return;

// Some weapons have dismount effects to perform before changing to the new weapon
deselect_curweap:
	if (curweap == 10) // lightsaber
	{
		PlaySoundThing(dismountSoundsaber, rbot, 1.0, -1, -1, 0x80); // Play saber dismount sound
		if(humChannel != -1)
		{
			StopSound(humChannel, 0.5); // Stop resident saber noise
			humChannel = -1;
		}
		SetThingLight(rbot, 0.0, 0.25); // Turn off extra light for saber glow
		ClearActorFlags(rbot, 0x2000); // lightsaber auto-blocking
		curweap = 0; // unlit saber
		SendMessageEx(skin, user7, 10303010, rbot, curweap, -1); // show model with saber turned off
		return;
	}
	return;

use_weap1: // Fists
	if (curweap != 1) // this weapon has not yet been mounted
	{
		call deselect_curweap;
		curweap = 1;
		SendMessageEx(skin, user7, 10303010, rbot, curweap, -1); // Update bot weapon mesh
		// Note: No mount sound
		SetArmedMode(rbot, 0);
		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon mounted)
		KillTimerEx(120);
		SetTimerEx(0.25, 120, -1, -1); // clear cooldown after mount complete
		return;
	}

	if (target != -1 && disttotarg < 0.3 && HasLOS(rbot, target)) // target is in range
	{
		if (nextanim == 0)
		{
			FireProjectile(rbot, projectile_weap01, -1, 8, '-0.02 0.03 0', '0 0 0', 1.0, 0x0, 0, 0);
			PlaySoundThing(snd_fireweap01, rbot, 1.0, 0.5, 2.5, 0x80);
		}
		else
		{
			FireProjectile(rbot, projectile_weap01, -1, 18, '0.02 0.03 0', '0 0 0', 1.0, 0x0, 0, 0);
			PlaySoundThing(snd_fireweap01a, rbot, 1.0, 0.5, 2.5, 0x80);
		}
		nextanim = 1 - nextanim;
		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
		SetTimerEx(0.65, 120, -1, -1); // wait for a short time before firing again
		return;
	}

	return;

use_weap2: // Bryar Pistol
	if (curweap != 2) // this weapon has not yet been mounted
	{
		call deselect_curweap;
		curweap = 2;
		SendMessageEx(skin, user7, 10303010, rbot, curweap, -1); // Update bot weapon mesh
		PlaySoundThing(mountSoundgun0, rbot, 1.0, -1, -1, 0x80);
		SetArmedMode(rbot, 1);
		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon mounted)
		KillTimerEx(120);
		SetTimerEx(0.5, 120, -1, -1); // clear cooldown after mount complete
		return;
	}

	if (target != -1 && disttotarg < 8.0 && HasLOS(rbot, target)) // target is in range
	{
		FireProjectile(rbot, projectile_weap02, snd_fireweap02, 8, '0.0135 0.1624 0.0', tempvector1, 1.0, 0x0, 0, 0);
		inv_energy = inv_energy - 1;
		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
		SetTimerEx(0.5 / powerboost, 120, -1, -1); // wait for a short time before firing again
		return;
	}

	return;

use_weap3: // Stormtrooper Rifle
	if (curweap != 3) // this weapon has not yet been mounted
	{
		call deselect_curweap;
		curweap = 3;
		SendMessageEx(skin, user7, 10303010, rbot, curweap, -1); // Update bot weapon mesh
		PlaySoundThing(mountSoundgun1, rbot, 1.0, -1, -1, 0x80);
		SetArmedMode(rbot, 1);
		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon mounted)
		KillTimerEx(120);
		SetTimerEx(0.5, 120, -1, -1); // clear cooldown after mount complete
		return;
	}

	if (target != -1 && disttotarg < 8.0 && HasLOS(rbot, target)) // target is in range
	{
		tempvector1 = VectorSet((Rand()-0.5)*5, (Rand()-0.5)*5, 0.0); // st-rifle is always inaccurate, override difficulty-based accuracy
		FireProjectile(rbot, projectile_weap03, snd_fireweap03, 8, '0.0168 0.1896 0.00', tempvector1, 1.0, 0x0, 0, 0);
		inv_energy = inv_energy - 2;
		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
		SetTimerEx(0.2 / powerboost, 120, -1, -1); // wait for a short time before firing again
		return;
	}

	return;

#use_weap4: // Thermal Detonators
#	if (curweap != 4) // this weapon has not yet been mounted
#	{
#		call deselect_curweap;
#		curweap = 4;
#		SendMessageEx(skin, user7, 10303010, rbot, curweap, -1); // Update bot weapon mesh
#		// Note: No mount sound
#		SetArmedMode(rbot, 0);
#		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon mounted)
#		KillTimerEx(120);
#		SetTimerEx(0.25, 120, -1, -1); // clear cooldown after mount complete
#		return;
#	}
#
#	if (target != -1 && 0.3 < disttotarg && disttotarg < 2.0 && HasLOS(rbot, target)) // target is in range
#	{
#		// TODO fire weapon
#		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
#		SetTimerEx(0.8, 120, -1, -1); // wait for a short time before firing again
#		return;
#	}
#
#	return;

use_weap5: // Crossbow
	if (curweap != 5) // this weapon has not yet been mounted
	{
		call deselect_curweap;
		curweap = 5;
		SendMessageEx(skin, user7, 10303010, rbot, curweap, -1); // Update bot weapon mesh
		PlaySoundThing(mountSoundgun0, rbot, 1.0, -1, -1, 0x80);
		SetArmedMode(rbot, 1);
		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon mounted)
		KillTimerEx(120);
		SetTimerEx(0.5, 120, -1, -1); // clear cooldown after mount complete
		return;
	}

	if (target != -1 && disttotarg < 8.0 && HasLOS(rbot, target)) // target is in range
	{
		FireProjectile(rbot, projectile_weap05b, snd_fireweap05a, 18, '0.0207 0.0888 0.00', tempvector1, 1.0, 0x0, 0, 0);
		inv_power = inv_power - 2;
		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
		SetTimerEx(0.6 / powerboost, 120, -1, -1); // wait for a short time before firing again
		return;
	}

	return;

use_weap6: // Repeater
	if (curweap != 6) // this weapon has not yet been mounted
	{
		call deselect_curweap;
		curweap = 6;
		SendMessageEx(skin, user7, 10303010, rbot, curweap, -1); // Update bot weapon mesh
		PlaySoundThing(mountSoundgun0, rbot, 1.0, -1, -1, 0x80);
		SetArmedMode(rbot, 1);
		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon mounted)
		KillTimerEx(120);
		SetTimerEx(0.5, 120, -1, -1); // clear cooldown after mount complete
		return;
	}

	if (target != -1 && disttotarg < 8.0 && HasLOS(rbot, target)) // target is in range
	{
		FireProjectile(rbot, projectile_weap06, snd_fireweap06, 8, '0.0186 0.0102 0.00', tempvector1, 1.0, 0x0, 0, 0);
		inv_power = inv_power - 1;
		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
		SetTimerEx(0.1 / powerboost, 120, -1, -1); // wait for a short time before firing again
		return;
	}

	return;

use_weap7: // Rail Detonator
	if (curweap != 7) // this weapon has not yet been mounted
	{
		call deselect_curweap;
		curweap = 7;
		SendMessageEx(skin, user7, 10303010, rbot, curweap, -1); // Update bot weapon mesh
		PlaySoundThing(mountSoundgun2, rbot, 1.0, -1, -1, 0x80);
		SetArmedMode(rbot, 1);
		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon mounted)
		KillTimerEx(120);
		SetTimerEx(0.5, 120, -1, -1); // clear cooldown after mount complete
		return;
	}

	if (target != -1 && disttotarg < 8.0 && HasLOS(rbot, target)) // target is in range
	{
		if (disttotarg > 0.8 || difficulty < 1) // primary fire - target is far enough away, or difficulty is too low
		{
			FireProjectile(rbot, projectile_weap07, snd_fireweap07, 18, '0.0214 0.15 0.00', tempvector1, 1.0, 0x0, 0, 0);
			ApplyForce(rbot, VectorScale(GetThingLVec(rbot), -40)); // Provide a kick backwards
			inv_railcharges = inv_railcharges - 1;
			weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
			SetTimerEx(1.0 / powerboost, 120, -1, -1); // wait for a short time before firing again
			return;
		}
		else // secondary fire - target is too close and difficulty allows secondary fire
		{
			FireProjectile(rbot, projectile_weap07a, snd_fireweap07, 18, '0.0214 0.15 0.00', tempvector1, 1.0, 0x0, 0, 0);
			ApplyForce(rbot, VectorScale(GetThingLVec(rbot), -40)); // Provide a kick backwards
			inv_railcharges = inv_railcharges - 1;
			weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
			SetTimerEx(1.0 / powerboost, 120, -1, -1); // wait for a short time before firing again
			return;
		}
		return;
	}

	return;

use_weap8: // Sequencer Charges
	if (curweap != 8) // this weapon has not yet been mounted
	{
		call deselect_curweap;
		curweap = 8;
		SendMessageEx(skin, user7, 10303010, rbot, curweap, -1); // Update bot weapon mesh
		// Note: No mount sound
		SetArmedMode(rbot, 0);
		// TODO: Implement proper mount wait
		// This code is called from the special info trigger, not the attacktarget: message
		// For now, just fall through and drop a mine
		// Then attacktarget: will switch back to ordinary weapon usage
		#weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon mounted)
		#KillTimerEx(120);
		#SetTimerEx(0.25, 120, -1, -1); // clear cooldown after mount complete
		#return;
	}

	// lay a mine (secondary fire)
	FireProjectile(rbot, projectile_weap08a, -1, 16, '0 0.05 0.00', '0 0 0', 1.0, 0x0, 0, 0);
	inv_weap8 = inv_weap8 - 1;
	weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
	SetTimerEx(0.8, 120, -1, -1); // wait for a short time before firing again
	return;

use_weap9: // Concussion Rifle
	if (curweap != 9) // this weapon has not yet been mounted
	{
		call deselect_curweap;
		curweap = 9;
		SendMessageEx(skin, user7, 10303010, rbot, curweap, -1); // Update bot weapon mesh
		PlaySoundThing(mountSoundgun1, rbot, 1.0, -1, -1, 0x80);
		SetArmedMode(rbot, 1);
		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon mounted)
		KillTimerEx(120);
		SetTimerEx(0.5, 120, -1, -1); // clear cooldown after mount complete
		return;
	}

	if (target != -1 && disttotarg < 8.0 && HasLOS(rbot, target)) // target is in range
	{
		if (disttotarg > 0.8 || difficulty < 1) // primary fire - target is far enough away, or difficulty is too low
		{
			FireProjectile(rbot, projectile_weap09, snd_fireweap09, 18, '0.02 0.15 0.0', tempvector1, 1.0, 0x0, 0, 0);
			ApplyForce(rbot, VectorScale(GetThingLVec(rbot), -80)); // Provide a kick backwards
			inv_power = inv_power - 8;
			weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
			SetTimerEx(1.2 / powerboost, 120, -1, -1); // wait for a short time before firing again
			return;
		}
		else // secondary fire - target is too close and difficulty allows secondary fire
		{
			FireProjectile(rbot, projectile_weap09a, snd_fireweap09, 18, '0.0 0.0 0.0', tempvector1, 1.0, 0x0, 0, 0);
			ApplyForce(rbot, VectorScale(GetThingLVec(rbot), -80)); // Provide a kick backwards
			inv_power = inv_power - 4;
			weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
			SetTimerEx(1.2 / powerboost, 120, -1, -1); // wait for a short time before firing again
			return;
		}
		return;
	}

	return;

use_weap10: // Lightsaber
	if (curweap != 10) // this weapon has not yet been mounted
	{
		call deselect_curweap;
		curweap = 10;
		SendMessageEx(skin, user7, 10303010, rbot, curweap, -1); // Update bot weapon mesh
		PlaySoundThing(mountSoundsaber, rbot, 1.0, -1, -1, 0x80); // Play saber mount sound
		humChannel = PlaySoundThing(humSound01, rbot, 1.0, -1, -1, 0x81); // Play resident saber noise
		SetThingLight(rbot, 0.65, 0.25); // Extra light for saber glow
		SetArmedMode(rbot, 2);
		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon mounted)
		KillTimerEx(120);
		SetTimerEx(1.0, 120, -1, -1); // clear cooldown after mount complete
		return;
	}

	if (target != -1 && disttotarg < 0.4 && HasLOS(rbot, target)) // target is in range
	{
		// Bot is going to swing the saber now, so stop any active saber block animation
		if (blocktrack != -1)
		{
			StopKey(rbot, blocktrack, 0.1);
			KillTimerEx(450); // cancel timer to clear blocktrack
			blocktrack = -1;
		}

		ClearActorFlags(rbot, 0x2000); // lightsaber auto-blocking

		// TODO: some of the attacks don't seem to apply base damage amount consistent with weap_saber.cog

		if (GetMajorMode(rbot) == 5) // Underwater saber attacks
		{
			if (nextanim == 0)
				PlayMode(rbot, 8);
			else
				PlayMode(rbot, 18);
			nextanim = 1 - nextanim;
			slashsound = Rand()*8;
			PlaySoundThing(swingSound0[slashsound], rbot, 1.0, -1, -1, 0x80);
			SetTimerEx(0.2, 200, projectile_weap00, -1); // fire 1st swing after 0.2 secs
			SetTimerEx(0.3, 200, projectile_weap00, -1); // fire 1st swing after 0.3 secs
			weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
			SetTimerEx(1.0, 120, -1, -1); // wait for a short time before firing again
			return;
		}
		else // Land based saber attacks
		{
			dot = ThingViewDot(rbot, target);
			// The bot is always trying to face its target, so the target will usually be in front of the bot
			// As a result, the dot is >0.9 most of the time, so we can make this check pretty sensitive
			if (dot > 0.95) // target is front of bot
			{
				tempflex1 = rand() * 3;
				if (tempflex1 > 2) // HEAVY Slash
				{
					PlayKey(rbot, chargeAnim, 2, 0x38);
					PlaySoundThing(swingSoundDbl01, rbot, 1.0, -1, -1, 0x80);
					SetTimerEx(0.2, 200, projectile_weap00a, -1); // fire 1st swing after 0.2 secs
					SetTimerEx(0.3, 200, projectile_weap00a, -1); // fire 1st swing after 0.3 secs
					SetTimerEx(0.6, 200, projectile_weap00a, -1); // fire 2nd swing after 0.6 secs
					SetTimerEx(0.7, 200, projectile_weap00a, -1); // fire 2nd swing after 0.7 secs
					weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
					SetTimerEx(2.0, 120, -1, -1); // wait for a short time before firing again
					return;
				}
				else if (tempflex1 > 1) // STANDING Strike
				{
					if (nextanim == 0)
						PlayKey(rbot, fireAnimF1, 2, 0x38);
					else
						PlayKey(rbot, fireAnimF2, 2, 0x38);
					nextanim = 1 - nextanim;
					slashsound = Rand()*8;
					PlaySoundThing(swingSound0[slashsound], rbot, 1.0, -1, -1, 0x80);
					SetTimerEx(0.2, 200, projectile_weap00, -1); // fire 1st swing after 0.2 secs
					SetTimerEx(0.3, 200, projectile_weap00, -1); // fire 1st swing after 0.3 secs
					weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
					SetTimerEx(0.8, 120, -1, -1); // wait for a short time before firing again
					return;
				}
				else // QUICK Slash
				{
					PlayKey(rbot, snapAnim0[slash], 1, 0x38);
					PlaySoundThing(swingSound0[slash], rbot, 1.0, -1, -1, 0x80);
					SetTimerEx(0.2, 200, projectile_weap00, -1); // fire 1st swing after 0.2 secs
					SetTimerEx(0.3, 200, projectile_weap00, -1); // fire 1st swing after 0.3 secs

					// Shorter fire delay for the first two slashes
					if (slash < 2)
					{
						slash = slash + 1;
						weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
						SetTimerEx(0.25, 120, -1, -1); // wait for a short time before firing again
						return;
					}

					// Longer fire delay for the third slash
					slash = 0;
					weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
					SetTimerEx(1.0, 120, -1, -1); // wait for a short time before firing again
					return;
				}
			}
			else
			{
				tempvector1 = VectorSub(GetThingPos(target), GetThingPos(rbot));
				if (VectorDot(tempvector1, GetThingRVec(rbot)) > 0) // LEFT Regular Strike
				{
					PlayKey(rbot, fireAnimL1, 1, 0x38); // Left strafe attack = Slash to the right
					slashSound = Rand() * 8;
					PlaySoundThing(swingSound0[slashSound], rbot, 1.0, -1, -1, 0x80);
					SetTimerEx(0.2, 200, projectile_weap00, -1); // fire 1st swing after 0.2 secs
					SetTimerEx(0.3, 200, projectile_weap00, -1); // fire 1st swing after 0.3 secs
					weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
					SetTimerEx(0.8, 120, -1, -1); // wait for a short time before firing again
					return;
				}
				else // RIGHT Regular Strike
				{
					PlayKey(rbot, fireAnimR1, 1, 0x38); // Right strafe attack = Slash to the left
					slashSound = Rand() * 8;
					PlaySoundThing(swingSound0[slashSound], rbot, 1.0, -1, -1, 0x80);
					SetTimerEx(0.2, 200, projectile_weap00, -1); // fire 1st swing after 0.2 secs
					SetTimerEx(0.3, 200, projectile_weap00, -1); // fire 1st swing after 0.3 secs
					weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
					SetTimerEx(0.8, 120, -1, -1); // wait for a short time before firing again
					return;
				}
			}
		}
		return;
	}

	SetActorFlags(rbot, 0x2000); // lightsaber auto-blocking

	return;

end
