# Rbot Path Cog (KFY)
#
# Server-only
#
# Specify a path for bot navigation. The path is a sequence of nodes that the
# bot will follow.
#
# This variant of the cog supports intelligent navigation to the Ysalamiri home
# for KFY matches.
#
# Path ranks:
#
# When the bot is seeking the Ysalamiri home and reaches an intersection
# between multiple paths, it will switch to the path with the highest priority.
# This ensures that the bot will reach the Ysalamiri home as quickly and
# efficiently as possible, rather than wandering about the map randomly and
# hoping to come across the Ysalamiri home by chance. The highest priority path
# is the one with the highest rank value.
#
# The rank value must be a non-negative integer (0,1,2,...) or -1 for no rank.
#
# Path run directions:
#
# In most cases, the bot will need to run in a certain direction on a path to
# reach the Ysalamiri home. The valid run direction values are:
#   -1 = either direction
#    0 = backward only
#    1 = forward only
#
# Note that if the path is unidirectional, the configured run direction will be
# ignored, since the bot must always run forward on unidirectional paths.
#
# Rbots originally created by Raynar
# Additional code by Hell Raiser

flags=0x40

symbols

message		startup
message		trigger

# An identifier for this path
int			pathid

# The nodes that comprise this path
thing		node0=-1							nolink
thing		node1=-1							nolink
thing		node2=-1							nolink
thing		node3=-1							nolink
thing		node4=-1							nolink
thing		node5=-1							nolink
thing		node6=-1							nolink
thing		node7=-1							nolink
thing		node8=-1							nolink
thing		node9=-1							nolink
thing		node10=-1							nolink
thing		node11=-1							nolink
thing		node12=-1							nolink
thing		node13=-1							nolink
thing		node14=-1							nolink
thing		node15=-1							nolink
thing		node16=-1							nolink
thing		node17=-1							nolink
thing		node18=-1							nolink
thing		node19=-1							nolink
thing		node20=-1							nolink
thing		node21=-1							nolink
thing		node22=-1							nolink
thing		node23=-1							nolink
thing		node24=-1							nolink

# Standard path characteristics

# Unidirectional = Bots can only move forward on this path, not backward
int			unidirectional=0

# Non-looping = The path will not be treated as a loop
# Normally, if a path starts and ends with the same node, it will be treated as
# a circular/looping path, which means that when bots have reached one end of
# the path, they can "wrap" around directly to the other end of the path
# instead of needing to reverse direction and backtrack (or change to another
# path).  However, there are some occasions where such paths should not be
# treated as looping.  Setting this option to 1 will force the path to be
# treated as non-looping even if the first and last nodes are the same.
int			nonlooping=0

# TODO: Replace unidirectional and nonlooping symbols with this?
# I'm not super thrilled with requiring the user to identify looping paths, I
# would rather require the user to identify nonlooping paths (i.e. require
# extra effort for the exception, not the norm). However, making flag 0x2
# non-looping seemed to be less clean/straightforward last time I tried to make
# that change, so this may just be a necessary evil in the end.
# 0x1 = Unidirectional
# 0x2 = Looping
# 0x4 = Disabled
int			pathflags=0							local

# Requirements that must be satisfied in order for the bot to use this path.
# 0x1 / 1 = require red CTF key
# 0x2 / 2 = require gold CTF key
int			requirements=0

# KFY path attributes

# The rank for this path when seeking the Ysalamiri home
int			kfyrank=-1

# The direction the bot must run on this path to reach the Ysalamiri home
int			kfyrundir=-1

# KFY game state
int			captured							local
#thing		carrier								local

# Save positions of all nodes
vector		nodepos0							local
vector		nodepos1							local
vector		nodepos2							local
vector		nodepos3							local
vector		nodepos4							local
vector		nodepos5							local
vector		nodepos6							local
vector		nodepos7							local
vector		nodepos8							local
vector		nodepos9							local
vector		nodepos10							local
vector		nodepos11							local
vector		nodepos12							local
vector		nodepos13							local
vector		nodepos14							local
vector		nodepos15							local
vector		nodepos16							local
vector		nodepos17							local
vector		nodepos18							local
vector		nodepos19							local
vector		nodepos20							local
vector		nodepos21							local
vector		nodepos22							local
vector		nodepos23							local
vector		nodepos24							local

# Save sectors of all nodes
sector		nodesec0							local
sector		nodesec1							local
sector		nodesec2							local
sector		nodesec3							local
sector		nodesec4							local
sector		nodesec5							local
sector		nodesec6							local
sector		nodesec7							local
sector		nodesec8							local
sector		nodesec9							local
sector		nodesec10							local
sector		nodesec11							local
sector		nodesec12							local
sector		nodesec13							local
sector		nodesec14							local
sector		nodesec15							local
sector		nodesec16							local
sector		nodesec17							local
sector		nodesec18							local
sector		nodesec19							local
sector		nodesec20							local
sector		nodesec21							local
sector		nodesec22							local
sector		nodesec23							local
sector		nodesec24							local

# Save sizes of all nodes
flex		nodesize0							local
flex		nodesize1							local
flex		nodesize2							local
flex		nodesize3							local
flex		nodesize4							local
flex		nodesize5							local
flex		nodesize6							local
flex		nodesize7							local
flex		nodesize8							local
flex		nodesize9							local
flex		nodesize10							local
flex		nodesize11							local
flex		nodesize12							local
flex		nodesize13							local
flex		nodesize14							local
flex		nodesize15							local
flex		nodesize16							local
flex		nodesize17							local
flex		nodesize18							local
flex		nodesize19							local
flex		nodesize20							local
flex		nodesize21							local
flex		nodesize22							local
flex		nodesize23							local
flex		nodesize24							local

# Save thing flags of all nodes
int			nodeflags0							local
int			nodeflags1							local
int			nodeflags2							local
int			nodeflags3							local
int			nodeflags4							local
int			nodeflags5							local
int			nodeflags6							local
int			nodeflags7							local
int			nodeflags8							local
int			nodeflags9							local
int			nodeflags10							local
int			nodeflags11							local
int			nodeflags12							local
int			nodeflags13							local
int			nodeflags14							local
int			nodeflags15							local
int			nodeflags16							local
int			nodeflags17							local
int			nodeflags18							local
int			nodeflags19							local
int			nodeflags20							local
int			nodeflags21							local
int			nodeflags22							local
int			nodeflags23							local
int			nodeflags24							local

# The number of nodes in this path
int			path_size=0							local

# Does the path loop (i.e. are bots allowed to "wrap" around the ends of the
# path as if it were a loop).  A path is treated as looping if the first and
# last nodes are the same, except if nonlooping is set to 1.
int			looping=0							local

# Working variables
int			i									local
#thing		rbot								local
int			rank								local
int			rundir								local

end

code

startup:
	if (IsMulti() && !IsServer()) return; // Host only

	// Determine total number of nodes in path
	for (i = 0 ; i < 25 ; i = i + 1)
	{
		if (node0[i] != -1)
		{
			nodepos0[i] = GetThingPos(node0[i]);
			nodesec0[i] = GetThingSector(node0[i]);
			nodesize0[i] = GetThingCollideSize(node0[i]);
			nodeflags0[i] = GetThingFlags(node0[i]);
			path_size = i + 1;
		}
	}

	// If beginning and end meet at a common node, treat this path as a loop
	if (!nonlooping && node0[0] == node0[path_size - 1]) 
	{
		looping = 1;
	}

	// TODO: This can be removed unce the user is inputting pathflags directly
	if (unidirectional) pathflags = BitSet(pathflags, 0x1);
	if (looping) pathflags = BitSet(pathflags, 0x2);

	// Give the other paths a chance to gather data before deleting any nodes.
	// This will ensure that removal of shared nodes (i.e. path intersections)
	// doesn't corrupt other paths (e.g. 0x2 thing flag getting set on removal).
	Sleep(1.0);

	// Delete the node things to free up thing references for larger levels
	for (i = 0 ; i < 25 ; i = i + 1)
	{
		if (node0[i] != -1 && GetThingType(node0[i]) != -1)
		{
			DestroyThing(node0[i]);
		}
	}

	return;

trigger:
	if (IsMulti() && !IsServer()) return; // Host only

	if (GetSourceRef() == 12220) // KFY info update
	{
		captured = GetParam(0);
		#carrier = GetParam(1);
		return;
	}

	if (GetSourceRef() == 13020) // Path data request
	{
		if (GetParam(0) != pathid) return;

		#rbot = GetParam(1);

		// Help bot navigate to Ysalamiri home
		rank = -1;
		rundir = -1;
		if (captured == 0) // Ysalamiri is at home
		{
			rank = kfyrank;
			rundir = kfyrundir;
		}
		if (unidirectional) // Must run forward on this path
		{
			rundir = 1;
		}

		SendTrigger(-1, 13030, path_size, requirements, rank, rundir); // Path data response
		SendTrigger(-1, 13031, pathflags, -1, -1, -1); // Path data response
		return;
	}

	if (GetSourceRef() == 13040) // Path node data request
	{
		if (GetParam(0) != pathid) return;

		i = GetParam(1);

		SendTrigger(-1, 13050, node0[i], VectorX(nodepos0[i]), VectorY(nodepos0[i]), VectorZ(nodepos0[i])); // Path node data response
		SendTrigger(-1, 13051, nodesec0[i], nodesize0[i], nodeflags0[i], -1); // Path node data response
		return;
	}

	if (GetSourceRef() == 13200) // Set path flag
	{
		if (GetParam(0) != pathid) return;

		pathflags = BitSet(pathflags, GetParam(1));
		return;
	}

	if (GetSourceRef() == 13201) // Clear path flag
	{
		if (GetParam(0) != pathid) return;

		pathflags = BitClear(pathflags, GetParam(1));
		return;
	}

	return;

end
