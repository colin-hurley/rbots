# Rbot Server Cog - Weapons (MotS variant)
#
# Server-only
# Type ID: 1023
#
# Rbots originally created by Raynar
# Additional code by Hell Raiser

flags=0x40

symbols

message		startup
message		damaged
message		blocked
message		trigger
message		timer
message		skill
message		user7

int			botid=0

thing		rbot=-1								local
int			weaponmode							local

cog			system=-1							local
cog			srv=-1								local
cog			skin=-1								local

# Weapon fire projectiles
template	projectile_weap00=+rbotsaber		local
template	projectile_weap01=+punch			local
template	projectile_weap02=+bryarbolt		local
template	projectile_weap03=+stlaser			local
#template	projectile_weap05=+crossbowbolt		local
#template	projectile_weap05a=+crossbowbolt2	local
template	projectile_weap05b=+crossbowbolt3	local
template	projectile_weap06=+repeaterball		local
template	projectile_weap07=+raildet			local
template	projectile_weap07a=+raildet2		local
#template	projectile_weap08=+seqchrg			local
template	projectile_weap08a=+seqchrg2		local
template	projectile_weap09=+concbullet		local
template	projectile_weap09a=+concblast2		local
template	projectile_weap13=+sclaser			local
template	projectile_weap17=+lhraildet		local
template	projectile_weap20=+carbsparks		local
template	projectile_weap20a=+bigpunch		local

# Projectiles to jump away from with saber
#template	dproj0=+raildet						local
#template	dproj1=+concbullet					local

# Weapon sounds
sound		mountSoundgun0=df_bry_ready.wav		local
sound       mountSoundgun1=df_rif_ready.wav		local
sound		mountSoundgun2=RailChargeArm01.WAV	local
sound		mountSoundsaber=LtSaberOn01.WAV		local
sound		dismountSoundsaber=LtSaberOff01.WAV	local
sound		humSound01=LtSaberLp01.WAV			local
sound		chargeSoundgun12=BCChargeUp.wav		local

# Weapon fire sounds
sound		snd_fireweap01=SwingFist01.wav		local
sound		snd_fireweap01a=SwingFist04.wav		local
sound		snd_fireweap02=pistol-1.wav			local
sound		snd_fireweap03=trprsht2.wav			local
#sound		snd_fireweap05=BCFire01.wav			local
sound		snd_fireweap05a=BCFire02.wav		local
sound		snd_fireweap06=rpeatrlp.wav			local
#sound		snd_fireweap06a=repeat-1.wav		local
sound		snd_fireweap07=RailChargeFire01.WAV	local
sound		snd_fireweap09=concuss5.wav			local
sound		snd_fireweap12=hsblaster.wav		local
sound		snd_fireweap20=cgunfire.wav			local

# Saber attack sounds
sound		swingSound0=LtSaberSwing01.WAV		local
sound		swingSound1=LtSaberSwing02.WAV		local
sound		swingSound2=LtSaberSwing03.WAV		local
sound		swingSound3=LtSaberSwing04.WAV		local
sound		swingSound4=LtSaberSwing05.WAV		local
sound		swingSound5=LtSaberSwing06.WAV		local
sound		swingSound6=LtSaberSwing07.WAV		local
sound		swingSound7=LtSaberSwing08.WAV		local
sound		swingSoundDbl01=LtSaberSwingDbl01.WAV	local

# Saber attack animation
keyframe	fireAnimR1=KYsabrr1.key				local
keyframe	fireAnimL1=KYsabrl1.key				local
#keyframe	fireAnimB1=KYsabrb1.key				local
#keyframe	fireAnimB2=KYsabrb2.key				local
keyframe	fireAnimF1=KYsnap1.key				local
keyframe	fireAnimF2=KYsnap2.key				local
keyframe	snapAnim0=KYsabrf1.key				local
keyframe	snapAnim1=KYsabrf2.key				local
keyframe	snapAnim2=KYsabrf1.key				local
keyframe	chargeAnim=KYcharge.key				local

# Saber block animation
keyframe    blockAnim0=KYblock0.key				local
keyframe    blockAnim1=KYblock1.key				local
keyframe    blockAnim2=KYblock2.key				local

# Carbonite freeze effects
sound		freezeSound=freeze.WAV				local
sound		thawSound=thaw.WAV					local
template	carboDummy=+CarboniteChar			local
int			frozenNow=0							local
thing		meCarbonited=-1						local

# Item templates
template	tmp_energycell=ENERGYCELL			local
template	tmp_powercell=POWERCELL				local
template	tmp_railcharges=RAILCHARGES			local
template	tmp_seekercharges=srailcharges		local
template	tmp_carbopellets=fivepellets		local
template	tmp_powerboost=POWERBOOST			local
template	tmp_weap2=bryarpistol				local
template	tmp_weap3=STRIFLE					local
template	tmp_weap4=DETONATOR					local
template	tmp_weap5=CROSSBOW					local
template	tmp_weap6=REPEATERGUN				local
template	tmp_weap7=RAILGUN					local
template	tmp_weap8=SEQCHARGE					local
template	tmp_weap9=CONCRIFLE					local
#template	tmp_weap10=lightsaber				local
template	tmp_weap12=blastechpistol			local
template	tmp_weap12a=greedopistol			local
template	tmp_weap13=scope					local
template	tmp_weap14=flash_bombs				local
template	tmp_weap17=railseek					local
template	tmp_weap20=carbgun					local
template	tmp_weap4x1=singledetonator			local
template	tmp_weap8x1=singleseqcharge			local
template	tmp_weap14x1=singleflashbomb		local

# Force-pulled weapon templates
template	tmp_fpweap2=+FPBryarPistol			local
template	tmp_fpweap3=+FPSTrifle				local
template	tmp_fpweap4=+FPDetoLive				local
template	tmp_fpweap5=+FPCrossbow				local
template	tmp_fpweap6=+FPRepeaterGun			local
template	tmp_fpweap7=+FPRailGun				local
template	tmp_fpweap8=+seqchrg2				local
template	tmp_fpweap9=+FPConcRifle			local
template	tmp_fpweap10=+FPLightSaber			local
template	tmp_fpweap11=+FPLightSaber			local
template	tmp_fpweap12=+FPBlastech			local
template	tmp_fpweap13=+FPScope				local
template	tmp_fpweap14=+FPDetoLive			local
template	tmp_fpweap15=+FPCrossbow			local
template	tmp_fpweap16=+FPRepeaterGun			local
template	tmp_fpweap17=+FPRailSeek			local
template	tmp_fpweap18=+seqchrg2				local
template	tmp_fpweap19=+FPConcRifle			local
template	tmp_fpweap20=+FPCarbGun				local

# Inventory items
int			inv_energy							local
int			inv_power							local
int			inv_railcharges						local
int			inv_seekercharges					local
flex		inv_carbopellets					local
int			inv_weap0							local desc=saber_unlit
int			inv_weap1							local desc=fists
int			inv_weap2							local desc=bryar
int			inv_weap3							local desc=st_rifle
int			inv_weap4							local desc=therm_det
int			inv_weap5							local desc=crossbow
int			inv_weap6							local desc=repeater
int			inv_weap7							local desc=railgun
int			inv_weap8							local desc=seq_charges
int			inv_weap9							local desc=conc_rifle
int			inv_weap10							local desc=saber_lit
int			inv_weap11							local desc=none
int			inv_weap12							local desc=blastech
int			inv_weap13							local desc=st_scope
int			inv_weap14							local desc=flash_bombs
int			inv_weap15							local desc=none
int			inv_weap16							local desc=none
int			inv_weap17							local desc=railseeker
int			inv_weap18							local desc=manual_seq_charges
int			inv_weap19							local desc=none
int			inv_weap20							local desc=carbo_gun

# Blastech charge state
int			chargecount=0						local

# Carbonite freeze state
int			hitSide=0							local

thing		hitList0							local
thing		hitList1							local
thing		hitList2							local
thing		hitList3							local
thing		hitList4							local
thing		hitList5							local
thing		hitList6							local
thing		hitList7							local
thing		hitList8							local
thing		hitList9							local

int			hitCount0							local
int			hitCount1							local
int			hitCount2							local
int			hitCount3							local
int			hitCount4							local
int			hitCount5							local
int			hitCount6							local
int			hitCount7							local
int			hitCount8							local
int			hitCount9							local

int			lastHit0							local
int			lastHit1							local
int			lastHit2							local
int			lastHit3							local
int			lastHit4							local
int			lastHit5							local
int			lastHit6							local
int			lastHit7							local
int			lastHit8							local
int			lastHit9							local

# When this flag is set, the hit list for the carbonite gun will be cleared on next use.
int			clearhitlist=0						local

# Misc
int			gamemode							local
int			difficulty							local
thing		target=-1							local
int			powerboost							local
int			humChannel=-1						local
int			blocktrack=-1						local
int			nextblock=0							local
int			nextanim=0							local
int			slash=0								local
int			curweap								local

# Transient working vars
int			i									local
vector		tempvector1							local
flex		tempflex1							local
int			special								local
int			mode								local
flex		damage								local
thing		damager								local
thing		potential							local
flex		dot									local
thing		item								local
int			priority							local
int			targweap							local
flex		disttotarg							local
int			slashsound							local
thing		dummy								local

end

code

startup:
	if (IsMulti() && !IsServer()) return; // Host only

	// Allow other server-side cogs to discover this one by its type
	SendTrigger(-1, 1852000, 1023, GetSelfCog(), botid, -1);

	return;

damaged:
	damage = GetParam(0);
	#damagetype= GetParam(1);
	damager = GetParam(2);

	// If we are hit by a +rbotsaber, change the explosion sparks from wall hit to flesh hit.
	// Known issue: Unfortunately, damaged: doesn't run after a thing gets the 0x200 thing flag.
	// So shortly after death, the attack will still create wall sparks when the corpse is hit.
	// Other than creating no wall sparks at all, is there anything we can do about this?
	if (GetThingTemplate(damager) == projectile_weap00) // saber attack from bot
	{
		ParseArg(damager, "explode=+ssparks_blood"); // create flesh hit sparks
	}

	// Note: It may seem a little odd to have this before the carbonite damage handling below, but that's how it is in vanilla MotS.
	// Indeed, if you have the saber mounted while you are frozen, you will still block attacks (e.g. lightsaber damage).
	if (GetActorFlags(rbot) & 0x2000 && ThingViewDot(rbot, damager) > 0.7) // can block attacks with saber
	{
		// The game engine does not auto-block the bot saber attack projectile
		// Emulate blocking of bot saber attacks here
		if (GetThingTemplate(damager) == projectile_weap00) // block saber attack from bot
		{
			ParseArg(damager, "explode=+ssparks_saber"); // create saber sparks

			// Emulate deflection effects at earliest opportunity after this daamged call returns
			// Note: If we call blocked in srv here, and then srv calls blocked in this cog, then the ReturnEx(0) below doesn't work as expected
			// That is, srv doesn't assign the 0 to the damage variable, although all of the messages actually run and otherwise behave correctly
			// Some kind of call depth or recursion limit maybe?
			// In any case, call blocked in a timer handler instead to work around this issue
			SetTimerEx(0.001, 440, -1, -1);

			ReturnEx(0); // take no damage when blocking
			return;
		}
	}

	// Special case for when the bot is carbo frozen
	if (frozenNow)
	{
		// Unfreeze the bot
		ClearActorFlags(rbot, 0x200000); // frozen
		ClearActorFlags(rbot, 0x40000); // no move
		ClearActorFlags(rbot, 0x40); // no drowning
		ClearThingFlags(rbot, 0x10); // invisible
		ClearThingFlags(rbot, 0x4); // mag-sealed

		// Destroy carbonite statue
		if (meCarbonited != -1)
		{
			// Instead of destroying the carbonite statue, just make it invisible.
			// The status will be destroyed in a few seconds by the timer in 00_carbstatue.cog.
			// That cog has a defect where it destroys the statue thing without checking the signature first.
			// If the statue is destroyed here, it is possible for that timer to erroneously destroy other things.
			// For example, if a bot respawns and is given the thing number before the timer runs out, the timer will destroy the bot.
			// Simply making the statue invisible here and letting that timer always destroy the status works around this defect.
			//DestroyThing(meCarbonited);
			SetThingFlags(meCarbonited, 0x10); // invisible
			SetThingUserData(meCarbonited, 0); // stop statue position sync (in 00_carbstatue.cog)
			meCarbonited = -1;
		}

		// broadcast the carbonite statue explosion to all players
		// Note: This trigger is handled in the player cog
		SendTrigger(-1, 99001, GetThingSector(rbot), VectorX(GetThingPos(rbot)), VectorY(GetThingPos(rbot)), VectorZ(GetThingPos(rbot)));

		frozenNow = 0;

		ReturnEx(GetThingHealth(rbot) * 10);
		return;
	}

	ReturnEx(damage);
	return;

blocked:
	if (blocktrack != -1)
	{
		StopKey(rbot, blocktrack, 0.1);
		KillTimerEx(450); // cancel timer to clear blocktrack
		blocktrack = -1;
	}
	// Play saber block animation
	blocktrack = PlayKey(rbot, blockAnim0[nextblock], 2, 0x1a);
	SetTimerEx(GetKeyLen(blockAnim0[nextblock]), 450, -1, -1); // Clear blocktrack after the animation is complete
	nextblock = (nextblock + 1) % 3;
	return;

trigger:
	if (IsMulti() && !IsServer()) return; // Host only

	if (GetSourceRef() == 1852000) // Rbot cog type discovery
	{
		if (GetParam(0) == 1010) // rbot-startup.cog
		{
			system = GetParam(1);
		}
		if (GetParam(0) == 1020) // rbot-srv.cog
		{
			if (GetParam(2) == botid) srv = GetParam(1);
		}
		return;
	}

	if (GetSourceRef() == 800) // game setup options
	{
		gamemode = GetParam(0);
		difficulty = GetParam(1);
		return;
	}

	if (GetParam(0) != botid) return; // not for this bot

	if (GetSourceRef() == 11020) // Received special info
	{
		special = GetParam(1);
		mode = GetParam(2);
		if (mode && BitTest(special, 0x10)) // Bot can lay a mine here
		{
			if (inv_weap8 > 0 && target == -1) // The bot has ammo and not already attacking a target
			{
				// lay a mine (secondary fire)
				call use_weap8;
			}
		}
		return;
	}

	return;

timer:
	if (GetSenderId() == 120) // weapon cooldown complete
	{
		weaponmode = BitClear(weaponmode, 0x1); // weapon cooldown
		call attacktarget;
		return;
	}

	if (GetSenderId() == 150) // after powerboost
	{
		powerboost = 1;
		return;
	}

	if (GetSenderId() == 160) // Bot killed with saber lit, do saber dismount effects
	{
		call deselect_curweap;
		return;
	}

	if (GetSenderId() == 200) // fire projectile to simulate a saber swing
	{
		damage = GetParam(0);
		tempvector1 = VectorSet(0, GetParam(1), 0); // yaw (left/right) offset
		FireProjectile(rbot, projectile_weap00, -1, -1, '0 0.1 0', tempvector1, damage, 0x2, 0, 0);
		return;
	}

	if (GetSenderId() == 440) // play saber block animation
	{
		// Emulate the blocked message that would normally be sent by the game engine
		SendMessageEx(srv, blocked, -1, -1, -1, -1);
		return;
	}

	if (GetSenderId() == 450) // block animation complete
	{
		blocktrack = -1;
		return;
	}

	if (GetSenderId() == 1035) // release bot from carbonite freeze
	{
		if (frozenNow)
		{
			PlaySoundThing(thawSound, rbot, 1.0, -1, -1, 0x180);

			// Unfreeze the bot
			ClearActorFlags(rbot, 0x200000); // frozen
			ClearActorFlags(rbot, 0x40000); // no move
			ClearActorFlags(rbot, 0x40); // no drowning
			ClearThingFlags(rbot, 0x10); // invisible
			ClearThingFlags(rbot, 0x4); // mag-sealed

			// Destroy carbonite statue
			if (meCarbonited != -1)
			{
				// Instead of destroying the carbonite statue, just make it invisible.
				// The status will be destroyed in a few seconds by the timer in 00_carbstatue.cog.
				// That cog has a defect where it destroys the statue thing without checking the signature first.
				// If the statue is destroyed here, it is possible for that timer to erroneously destroy other things.
				// For example, if a bot respawns and is given the thing number before the timer runs out, the timer will destroy the bot.
				// Simply making the statue invisible here and letting that timer always destroy the status works around this defect.
				//DestroyThing(meCarbonited);
				SetThingFlags(meCarbonited, 0x10); // invisible
				SetThingUserData(meCarbonited, 0); // stop statue position sync (in 00_carbstatue.cog)
				meCarbonited = -1;
			}

			frozenNow = 0;
		}
		return;
	}

	return;

skill:
	if (GetThingHealth(rbot) <= 0) // bot is dead
	{
		if (GetParam(0) == 1035) // Carbonite Freeze
		{
			// All bot freezing effects are handled here, so tell the carbonite gun cog not to freeze the actor
			ReturnEx(17);
			return;
		}
		ReturnEx(-1);
		return;
	}

	if (GetParam(0) == 1035) // Carbonite Freeze
	{
		if (!(GetActorFlags(rbot) & 0x8 && GetThingFlags(rbot) & 0x4)) // Don't freeze if super shield is on.
		{
			if (!frozenNow)
			{
				frozenNow = 1;

				PlaySoundThing(freezeSound, rbot, 1.0, -1, -1, 0x180);

				// Freeze the bot
				StopThing(rbot);
				SetActorFlags(rbot, 0x200000); // frozen
				SetActorFlags(rbot, 0x40000);  // no move
				SetActorFlags(rbot, 0x40); // no drowning
				SetThingFlags(rbot, 0x10); // invisible
				SetThingFlags(rbot, 0x4); // mag-sealed

				// Create carbonite statue
				meCarbonited = CreateThing(carboDummy, rbot);
				AttachThingToThing(meCarbonited, rbot);
				SetThingUserData(meCarbonited, 5000+rbot); // used by 00_carbstatue.cog to sync the statue position

				// Stop certain force powers
				SendMessageEx(srv, user7, 10223008, -1, -1, -1);

				// Unfreeze bot after a delay
				tempflex1 = GetParam(1); // freeze duration
				if (GetParam(2) == GetInvCog(GetLocalPlayerThing(), GetWeaponBin(20))) // senderref is carbonite gun cog
				{
					// The carbonite gun weapon cog uses a different freeze duration for actors and players
					// Adjust the freeze duration to match the duration for players
					tempflex1 = 6.0;
				}
				SetTimerEx(tempflex1, 1035, -1, -1);
			}
		}
		// All bot freezing effects are handled here, so tell the carbonite gun cog not to freeze the actor
		ReturnEx(17);
		return;
	}

	ReturnEx(-1);
	return;

// Execute public API function for this cog
// Param 0 = Function ID
// The remaining params will be processed according to the requested function
// For example, param1 might be an index into an array.
// Returns the function-specific result of the execution
user7:
	if (GetParam(0) == 10231001) { ReturnEx(weaponmode); return; }
	if (GetParam(0) == 10231002) { ReturnEx(inv_energy); return; }
	if (GetParam(0) == 10231003) { ReturnEx(inv_power); return; }
	if (GetParam(0) == 10231005) { ReturnEx(inv_railcharges); return; }
	if (GetParam(0) == 10231006) { ReturnEx(inv_weap0[GetParam(1)]); return; }
	if (GetParam(0) == 10231007) { ReturnEx(powerboost); return; }
	if (GetParam(0) == 10231008) { ReturnEx(inv_seekercharges); return; }
	if (GetParam(0) == 10231009) { ReturnEx(inv_carbopellets); return; }
	if (GetParam(0) == 10231014) { ReturnEx(curweap); return; }
	if (GetParam(0) == 10231015) { ReturnEx(frozenNow); return; }

	if (GetParam(0) == 10232010) { target = GetParam(1); return; }

	if (GetParam(0) == 10232502) // add energy
	{
		inv_energy = inv_energy + GetParam(1);
		if (inv_energy > 500) inv_energy = 500;
		return;
	}

	if (GetParam(0) == 10232503) // add power
	{
		inv_power = inv_power + GetParam(1);
		if (inv_power > 500) inv_power = 500;
		return;
	}

	if (GetParam(0) == 10232505) // add rail charges
	{
		inv_railcharges = inv_railcharges + GetParam(1);
		if (inv_railcharges > 30) inv_railcharges = 30;
		return;
	}

	if (GetParam(0) == 10232506) // add weapons
	{
		if (GetParam(1) == 4)
		{
			inv_weap4 = inv_weap4 + GetParam(2);
			if (inv_weap4 > 30) inv_weap4 = 30;
			return;
		}

		if (GetParam(1) == 8)
		{
			inv_weap8 = inv_weap8 + GetParam(2);
			if (inv_weap8 > 30) inv_weap8 = 30;
			return;
		}

		if (GetParam(1) == 14)
		{
			inv_weap14 = inv_weap14 + GetParam(2);
			if (inv_weap14 > 30) inv_weap14 = 30;
			return;
		}

		if (GetParam(2)) inv_weap0[GetParam(1)] = 1;
		return;
	}

	if (GetParam(0) == 10232508) // add seeker charges
	{
		inv_seekercharges = inv_seekercharges + GetParam(1);
		if (inv_seekercharges > 30) inv_seekercharges = 30;
		return;
	}

	if (GetParam(0) == 10232509) // add carbonite pellets
	{
		inv_carbopellets = inv_carbopellets + GetParam(1);
		if (inv_carbopellets > 20) inv_carbopellets = 20;
		return;
	}

	if (GetParam(0) == 10233000) // bot AI pulse
	{
		call attacktarget; // start attacking if we haven't already
		return;
	}

	if (GetParam(0) == 10233003) // force pull used against bot
	{
		item = -1;
		if (1 < curweap && curweap != 10) // don't force pull fists or saber
		{
			if (inv_weap0[curweap] > 0) // bot has weapon/ammo
			{
				if (curweap == 13) // scope
				{
					// Special case, pull rifle instead of scope
					curweap = 3;
				}
				// Remove the weapon from the bot and create a powerup corresponding to the current weapon
				inv_weap0[curweap] = inv_weap0[curweap] - 1;
				item = CreateThingAtPos(tmp_fpweap2[curweap-2], GetThingSector(rbot), GetThingPos(rbot), '0 0 0');
				call use_weap1; // Select fists
			}
		}
		ReturnEx(item); // return the powerup
		return;
	}

	if (GetParam(0) == 10233005) // bot respawned
	{
		rbot = GetParam(1);
		skin = GetParam(2);

		inv_weap0 = 1; // saber unlit
		inv_weap1 = 1; // fists
		inv_weap2 = 1; // bryar
		inv_weap3 = 0; // strifle
		inv_weap4 = 0; // thermal dets
		inv_weap5 = 0; // bowcaster
		inv_weap6 = 0; // repeater
		inv_weap7 = 0; // raildet
		inv_weap8 = 0; // sequencers
		inv_weap9 = 0; // concrifle
		inv_weap10 = 1; // saber lit
		inv_weap11 = 0; // none
		inv_weap12 = 0; // blastech
		inv_weap13 = 0; // stscope
		inv_weap14 = 0; // flash bombs
		inv_weap15 = 0; // none
		inv_weap16 = 0; // none
		inv_weap17 = 0; // railseeker
		inv_weap18 = 0; // none
		inv_weap19 = 0; // none
		inv_weap20 = 0; // carbo gun
		inv_energy = 50;
		inv_power = 0;
		inv_railcharges = 0;
		inv_seekercharges = 0;
		inv_carbopellets = 0;
		powerboost = 1; // normal fire rate
		curweap = 0;
		weaponmode = 0x0;
		frozenNow = 0;
		meCarbonited = -1;

		return;
	}

	if (GetParam(0) == 10233006) // bot killed
	{
		if (curweap == 10) // current weapon is saber
		{
			// The bot died with the saber selected, stop the saber weapon effects
			// For some reason, trying to do this in the killed/damaged message directly does not work (the saber dismount
			// sound doesn't play), but doing it in a timer shortly after the bot dies does work.  Adding the 0x100 flag
			// doesn't help.  Maybe the sound is conflicting with the bot's soundclass death sound?
			SetTimerEx(0.05, 160, -1, -1);
		}

		ReturnEx(0);
		return;
	}

	if (GetParam(0) == 10233007) // stop AI processes
	{
		KillTimerEx(120); // weapon cooldown
		KillTimerEx(150); // powerboost
		KillTimerEx(200); // saber attack
		KillTimerEx(1035); // stop carbonite effects
		ReturnEx(0);
		return;
	}

	if (GetParam(0) == 10233010) // get item priority
	{
		item = GetParam(1);
		priority = GetParam(2);
		if (BitTest(gamemode, 0x1)) // allow guns
		{
			// Weapons
			if ((GetThingTemplate(item) == tmp_weap2 && !inv_weap2) || (GetThingTemplate(item) == tmp_fpweap2 && !inv_weap2) || (GetThingTemplate(item) == tmp_weap3 && !inv_weap3) || (GetThingTemplate(item) == tmp_fpweap3 && !inv_weap3) || (GetThingTemplate(item) == tmp_weap5 && !inv_weap5) || (GetThingTemplate(item) == tmp_fpweap5 && !inv_weap5) || (GetThingTemplate(item) == tmp_weap6 && !inv_weap6) || (GetThingTemplate(item) == tmp_fpweap6 && !inv_weap6) || (GetThingTemplate(item) == tmp_weap7 && !inv_weap7) || (GetThingTemplate(item) == tmp_fpweap7 && !inv_weap7) || (GetThingTemplate(item) == tmp_weap9 && !inv_weap9) || (GetThingTemplate(item) == tmp_fpweap9 && !inv_weap9) || (GetThingTemplate(item) == tmp_weap12 && !inv_weap12) || (GetThingTemplate(item) == tmp_fpweap12 && !inv_weap12) || (GetThingTemplate(item) == tmp_weap13 && !inv_weap13) || (GetThingTemplate(item) == tmp_weap17 && !inv_weap17) || (GetThingTemplate(item) == tmp_fpweap17 && !inv_weap17) || (GetThingTemplate(item) == tmp_weap20 && !inv_weap20) || (GetThingTemplate(item) == tmp_fpweap20 && !inv_weap20)) priority = 6;

			// Ammo
			if ((GetThingTemplate(item) == tmp_energycell && inv_energy < 100) || (GetThingTemplate(item) == tmp_powercell && inv_power < 100) || (GetThingTemplate(item) == tmp_railcharges && inv_railcharges < 10) || (GetThingTemplate(item) == tmp_seekercharges && inv_seekercharges < 10) || (GetThingTemplate(item) == tmp_carbopellets && inv_carbopellets < 6)) priority = 5;

			// TDs, sequencers, and flash bombs
			if ((GetThingTemplate(item) == tmp_weap4 && inv_weap4 < 6) || (GetThingTemplate(item) == tmp_weap4x1 && inv_weap4 < 6) || (GetThingTemplate(item) == tmp_weap8 && inv_weap8 < 5) || (GetThingTemplate(item) == tmp_weap8x1 && inv_weap8 < 5) || (GetThingTemplate(item) == tmp_fpweap8 && inv_weap8 < 5) || (GetThingTemplate(item) == tmp_weap14 && inv_weap14 < 6) || (GetThingTemplate(item) == tmp_weap14x1 && inv_weap14 < 6)) priority = 4;
		}
		ReturnEx(priority);
		return;
	}

	if (GetParam(0) == 10233020) // pickup item
	{
		item = GetParam(1);

		if (GetThingTemplate(item) == tmp_energycell)
		{
			if (inv_energy < 500)
			{
				inv_energy = inv_energy + 20;
				if (inv_energy > 500) inv_energy = 500;
				TakeItem(item, rbot); // bot picked up this item
			}
			return;
		}

		if (GetThingTemplate(item) == tmp_powercell)
		{
			if (inv_power < 500)
			{
				inv_power = inv_power + 25;
				if (inv_power > 500) inv_power = 500;
				TakeItem(item, rbot); // bot picked up this item
			}
			return;
		}

		if (GetThingTemplate(item) == tmp_weap4)
		{
			if (inv_weap4 < 30)
			{
				inv_weap4 = inv_weap4 + 3;
				if (inv_weap4 > 30) inv_weap4 = 30;
				TakeItem(item, rbot); // bot picked up this item
			}
			return;
		}
		if (GetThingTemplate(item) == tmp_weap4x1)
		{
			if (inv_weap4 < 30)
			{
				inv_weap4 = inv_weap4 + 1;
				TakeItem(item, rbot); // bot picked up this item
			}
			return;
		}

		if (GetThingTemplate(item) == tmp_weap8)
		{
			if (inv_weap8 < 30)
			{
				inv_weap8 = inv_weap8 + 5;
				if (inv_weap8 > 30) inv_weap8 = 30;
				TakeItem(item, rbot); // bot picked up this item
			}
			return;
		}

		if (GetThingTemplate(item) == tmp_weap8x1 || GetThingTemplate(item) == tmp_fpweap8)
		{
			if (inv_weap8 < 30)
			{
				inv_weap8 = inv_weap8 + 1;
				TakeItem(item, rbot); // bot picked up this item
			}
			return;
		}

		if (GetThingTemplate(item) == tmp_weap14)
		{
			if (inv_weap14 < 30)
			{
				inv_weap14 = inv_weap14 + 3;
				if (inv_weap14 > 30) inv_weap14 = 30;
				TakeItem(item, rbot); // bot picked up this item
			}
			return;
		}
		if (GetThingTemplate(item) == tmp_weap14x1)
		{
			if (inv_weap14 < 30)
			{
				inv_weap14 = inv_weap14 + 1;
				TakeItem(item, rbot); // bot picked up this item
			}
			return;
		}

		if (GetThingTemplate(item) == tmp_railcharges)
		{
			if (inv_railcharges < 30)
			{
				inv_railcharges = inv_railcharges + 3;
				if (inv_railcharges > 30) inv_railcharges = 30;
				TakeItem(item, rbot); // bot picked up this item
			}
			return;
		}

		if (GetThingTemplate(item) == tmp_seekercharges)
		{
			if (inv_seekercharges < 30)
			{
				inv_seekercharges = inv_seekercharges + 3;
				if (inv_seekercharges > 30) inv_seekercharges = 30;
				TakeItem(item, rbot); // bot picked up this item
			}
			return;
		}

		if (GetThingTemplate(item) == tmp_carbopellets)
		{
			if (inv_carbopellets < 20)
			{
				inv_carbopellets = inv_carbopellets + 5;
				if (inv_carbopellets > 20) inv_carbopellets = 20;
				TakeItem(item, rbot); // bot picked up this item
			}
			return;
		}

		if (GetThingTemplate(item) == tmp_powerboost)
		{
			TakeItem(item, rbot); // bot picked up this item
			powerboost = 2;
			KillTimerEx(150);
			SetTimerEx(30, 150, -1, -1); // switch off in 30 secs
			return;
		}

		if (GetThingTemplate(item) == tmp_weap2 || GetThingTemplate(item) == tmp_fpweap2)
		{
			if (inv_weap2 == 0 || inv_energy < 500)
			{
				inv_weap2 = 1;
				inv_energy = inv_energy + 10;
				if (inv_energy > 500) inv_energy = 500;
				TakeItem(item, rbot); // bot picked up this item
			}
			return;
		}

		if (GetThingTemplate(item) == tmp_weap3 || GetThingTemplate(item) == tmp_fpweap3)
		{
			if (inv_weap3 == 0 || inv_energy < 500)
			{
				inv_weap3 = 1;
				inv_energy = inv_energy + 24;
				if (inv_energy > 500) inv_energy = 500;
				TakeItem(item, rbot); // bot picked up this item
			}
			return;
		}

		if (GetThingTemplate(item) == tmp_weap5 || GetThingTemplate(item) == tmp_fpweap5)
		{
			if (inv_weap5 == 0 || inv_power < 500)
			{
				inv_weap5 = 1;
				inv_power = inv_power + 16;
				if (inv_power > 500) inv_power = 500;
				TakeItem(item, rbot); // bot picked up this item
			}
			return;
		}

		if (GetThingTemplate(item) == tmp_weap6 || GetThingTemplate(item) == tmp_fpweap6)
		{
			if (inv_weap6 == 0 || inv_power < 500)
			{
				inv_weap6 = 1;
				inv_power = inv_power + 24;
				if (inv_power > 500) inv_power = 500;
				TakeItem(item, rbot); // bot picked up this item
			}  
			return;
		}

		if (GetThingTemplate(item) == tmp_weap7 || GetThingTemplate(item) == tmp_fpweap7)
		{
			if (inv_weap7 == 0 || inv_weap17 == 0 || inv_railcharges < 30)
			{
				inv_weap7 = 1;
				inv_weap17 = 1;
				inv_railcharges = inv_railcharges + 6;
				if (inv_railcharges > 30) inv_railcharges = 30;
				TakeItem(item, rbot); // bot picked up this item
			}
			return;
		}

		if (GetThingTemplate(item) == tmp_weap9 || GetThingTemplate(item) == tmp_fpweap9)
		{
			if (inv_weap9 == 0 || inv_power < 500)
			{
				inv_weap9 = 1;
				inv_power = inv_power + 32;
				if (inv_power > 500) inv_power = 500;
				TakeItem(item, rbot); // bot picked up this item
			}
			return;
		}

		if (GetThingTemplate(item) == tmp_weap12 || GetThingTemplate(item) == tmp_weap12a || GetThingTemplate(item) == tmp_fpweap12)
		{
			if (inv_weap12 == 0 || inv_energy < 500)
			{
				inv_weap12 = 1;
				inv_energy = inv_energy + 10;
				if (inv_energy > 500) inv_energy = 500;
				TakeItem(item, rbot); // bot picked up this item
			}
			return;
		}

		if (GetThingTemplate(item) == tmp_weap13)
		{
			if (inv_weap13 == 0)
			{
				inv_weap13 = 1;
				TakeItem(item, rbot); // bot picked up this item
			}
			return;
		}

		if (GetThingTemplate(item) == tmp_weap17 || GetThingTemplate(item) == tmp_fpweap17)
		{
			if (inv_weap7 == 0 || inv_weap17 == 0 || inv_seekercharges < 30)
			{
				inv_weap7 = 1;
				inv_weap17 = 1;
				inv_seekercharges = inv_seekercharges + 6;
				if (inv_seekercharges > 30) inv_seekercharges = 30;
				TakeItem(item, rbot); // bot picked up this item
			}
			return;
		}

		if (GetThingTemplate(item) == tmp_weap20 || GetThingTemplate(item) == tmp_fpweap20)
		{
			if (inv_weap20 == 0 || inv_carbopellets < 20)
			{
				inv_weap20 = 1;
				inv_carbopellets = inv_carbopellets + 5;
				if (inv_carbopellets > 20) inv_carbopellets = 20;
				TakeItem(item, rbot); // bot picked up this item
			}
			return;
		}

		ReturnEx(0);
		return;
	}

	if (GetParam(0) == 10233030) // get target priority
	{
		#potential = GetParam(1);
		priority = GetParam(2);
		// No priority adjustments implemented yet...
		ReturnEx(priority);
		return;
	}

	if (GetParam(0) == 10233050) // decide whether to move toward target
	{
		target = GetParam(1);
		// Get the current weapon of our target
		targweap = 0;
		if (SendMessageEx(system, user7, 10103000, target, -1, -1) != -1) // target is a bot
		{
			targweap = SendMessageEx(GetThingClassCog(target), user7, 10231014, -1, -1, -1);
		}
		if (GetThingType(target) == 10) // target is a player
		{
			targweap = GetCurWeapon(target);
			if (targweap == 11) targweap = 10; // If player has saber, set it to 10 for simplicity
		}
		if (((curweap == 2 || curweap == 12) && targweap > 2 && targweap != 12 && difficulty >= 1) || ((targweap == 7 || targweap == 9 || targweap == 17 || targweap == 20) && curweap < 6 && difficulty >= 2)) // Need a better weapon
		{
			// Bot is outmatched because target has a better weapon, keep moving until bot finds a better weapon
			ReturnEx(0);
			return;
		}
		if (curweap == 20 && VectorDist(GetThingPos(rbot), GetThingPos(target)) < 0.5 && !(GetThingFlags(target) & 0x4 && GetThingFlags(target) & 0x10 && GetActorFlags(target) & 0x40 && GetActorFlags(target) & 0x40000 && GetActorFlags(target) & 0x200000)) // Trying to freeze target
		{
			// Maintain a little bit of distance for higher chance of freezing the target
			// If we're too close, it's easier for the target to get out of the line of fire
			ReturnEx(0);
			return;
		}
		ReturnEx(1);
		return;
	}

	// Report error if function ID does not match anything above
	jkStringClear();
	jkStringConcatFormattedInt(GetSenderRef(), "rbot-srv-weapons.cog :: ERROR :: Cog %d");
	jkStringConcatFormattedInt(GetParam(0), " has requested an invalid function ID, %d");
	jkStringOutput(-1, -1);
	return;

attacktarget:
	if (BitTest(weaponmode, 0x1)) return; // can't attack during cooldown

	if (rbot == -1 || GetThingHealth(rbot) <= 0 || GetDebugModeFlags() & 0x1 || AIGetMode(rbot) & 0x2000 || GetActorFlags(rbot) & 0x200000) // bot dead or frozen or AI disabled
	{
		clearhitlist = 1; // stopped firing or not yet firing, clear hit list
		return;
	}

	// Determine how far away the target is
	disttotarg = 0;
	if (target != -1) disttotarg = VectorDist(GetThingPos(rbot), GetThingPos(target));

	// Lead distance
	#if (difficulty == 4)
	#{
	#	// FIXME: projectile_weap00[curweap] does not retrieve the correct template (some weapons have two templates, so the index by weapon number is not accurate)
	#	dummyproj = FireProjectile(rbot, projectile_weap00[curweap], -1, -1, '0 0 0', '0 0 0', 1.0, 0x0, 0, 0);
	#	targetvel = GetThingVel(target);
	#	speed = VectorDist('0 0 0', VectorSub(GetThingVel(dummyproj), targetvel));
	#	DestroyThing(dummyproj);
	#	distance = VectorDist(GetThingPos(target), GetThingPos(rbot));
	#	time = distance / speed;
	#	AiSetLookPos(rbot, VectorAdd(GetThingPos(target), VectorScale(targetvel, time)));
	#}

	tempvector1 = VectorSet((Rand()-0.5)*(4-difficulty)*2, (Rand()-0.5)*(4-difficulty)*2, 0); // set accuracy based on difficulty

	if (!BitTest(gamemode, 0x1)) // no guns
	{
		if (BitTest(gamemode, 0x2)) goto use_weap10; // sabers only
		goto use_weap1; // fists only
	}

	// Select best weapon based on difficulty
	if (difficulty < 3 || target == -1) // use the biggest gun on lower difficulties or if bot has no target
	{
		// Only use the carbonite gun if we are close enough to the target
		if (disttotarg < 2.0 && inv_weap20 == 1 && inv_carbopellets > 0)
		{
			goto use_weap20;
		}

		if (inv_weap17 == 1 && inv_seekercharges > 0)
		{
			goto use_weap17;
		}
		if (inv_weap9 == 1 && inv_power > 7)
		{
			goto use_weap9;
		}
		if (inv_weap7 == 1 && inv_railcharges > 0)
		{
			goto use_weap7;
		}

		// Only use the rifle scope if we are far enough from the target
		if (disttotarg > 2.0 && inv_weap3 == 1 && inv_weap13 == 1 && inv_energy > 3)
		{
			goto use_weap13;
		}

		if (inv_weap6 == 1 && inv_power > 0)
		{
			goto use_weap6;
		}
		if (inv_weap5 == 1 && inv_power > 1)
		{
			goto use_weap5;
		}
		if (inv_weap3 == 1 && inv_energy > 1)
		{
			goto use_weap3;
		}
		if (inv_weap12 == 1 && inv_energy > 0)
		{
			goto use_weap12;
		}
		if (inv_weap2 == 1 && inv_energy > 0)
		{
			goto use_weap2;
		}
	}
	else // On higher difficulties, make smarter gun selection choices
	{
		// Get the current weapon of our target
		targweap = 0;
		if (SendMessageEx(system, user7, 10103000, target, -1, -1) != -1) // target is a bot
		{
			targweap = SendMessageEx(GetThingClassCog(target), user7, 10231014, -1, -1, -1);
		}
		if (GetThingType(target) == 10) // target is a player
		{
			targweap = GetCurWeapon(target);
			if (targweap == 11) targweap = 10; // If player has saber, set it to 10 for simplicity
		}

		// Only use the carbonite gun if we are close enough to the target
		if (disttotarg < 2.0 && inv_weap20 == 1 && inv_carbopellets > 0)
		{
			goto use_weap20;
		}

		// We don't want to use explosive weapons at very close range
		if (disttotarg > 0.4)
		{
			if (inv_weap17 == 1 && inv_seekercharges > 0)
			{
				goto use_weap17;
			}
			if (inv_weap9 == 1 && inv_power > 7)
			{
				goto use_weap9;
			}
			if (inv_weap7 == 1 && inv_railcharges > 0)
			{
				goto use_weap7;
			}
		}

		// If target is frozen in carbonite, make sure to choose a weapon that will not ricochet off of the mag-sealed statue
		if (GetThingFlags(target) & 0x4 && GetThingFlags(target) & 0x10 && GetActorFlags(target) & 0x40 && GetActorFlags(target) & 0x40000 && GetActorFlags(target) & 0x200000) // target is frozen in carbonite
		{
			if (BitTest(gamemode, 0x2)) // sabers allowed
			{
				goto use_weap10; // prefer saber over fists
			}

			goto use_weap1; // no other option available, select fists
		}

		// Only use the rifle scope if we are far enough from the target
		if (disttotarg > 2.0 && inv_weap3 == 1 && inv_weap13 == 1 && inv_energy > 3)
		{
			goto use_weap13;
		}

		// We don't want to fight the target bot with energy bullets at close range if the target can block them with a saber
		if (disttotarg < 0.9 && targweap == 10 && BitTest(gamemode, 0x2)) // target is using saber and bot is allowed to use a saber
		{
			goto use_weap10; // enemy saber can block energy weapons, use saber to attack
		}

		if (inv_weap6 == 1 && inv_power > 0)
		{
			goto use_weap6;
		}
		if (inv_weap5 == 1 && inv_power > 1)
		{
			goto use_weap5;
		}
		if (inv_weap3 == 1 && inv_energy > 1)
		{
			goto use_weap3;
		}
		if (inv_weap12 == 1 && inv_energy > 0)
		{
			goto use_weap12;
		}
		if (inv_weap2 == 1 && inv_energy > 0)
		{
			goto use_weap2;
		}
	}

	// No appropriate guns to use, choice is now between saber and fists
	if (BitTest(gamemode, 0x2)) // sabers allowed
	{
		goto use_weap10; // prefer saber over fists
	}

	goto use_weap1; // no other option available, select fists

	return;

// Some weapons have dismount effects to perform before changing to the new weapon
deselect_curweap:
	if (curweap == 10) // lightsaber
	{
		PlaySoundThing(dismountSoundsaber, rbot, 1.0, -1, -1, 0x80); // Play saber dismount sound
		if(humChannel != -1)
		{
			StopSound(humChannel, 0.5); // Stop resident saber noise
			humChannel = -1;
		}
		SetThingLight(rbot, 0.0, 0.25); // Turn off extra light for saber glow
		ClearActorFlags(rbot, 0x2000); // lightsaber auto-blocking
		curweap = 0; // unlit saber
		SendMessageEx(skin, user7, 10303010, rbot, curweap, -1); // show model with saber turned off
		return;
	}
	if (curweap == 12 && chargecount > 0) // Blastech (charged)
	{
		for (i = 0 ; i < chargecount ; i = i + 1)
		{
			FireProjectile(rbot, projectile_weap02, snd_fireweap12, 8, '0.0135 0.1624 0.0', tempvector1, 1.0, 0x0, 0, 0);
		}
		chargecount = 0; // clear charge count after firing
		return;
	}
	return;

use_weap1: // Fists
	if (curweap != 1) // this weapon has not yet been mounted
	{
		call deselect_curweap;
		curweap = 1;
		SendMessageEx(skin, user7, 10303010, rbot, curweap, -1); // Update bot weapon mesh
		// Note: No mount sound
		SetArmedMode(rbot, 0);
		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon mounted)
		KillTimerEx(120);
		SetTimerEx(0.25, 120, -1, -1); // clear cooldown after mount complete
		return;
	}

	if (target != -1 && disttotarg < 0.3 && HasLOS(rbot, target)) // target is in range
	{
		if (nextanim == 0)
		{
			FireProjectile(rbot, projectile_weap01, -1, 8, '-0.02 0.03 0', '0 0 0', 1.0, 0x0, 0, 0);
			PlaySoundThing(snd_fireweap01, rbot, 1.0, 0.5, 2.5, 0x80);
		}
		else
		{
			FireProjectile(rbot, projectile_weap01, -1, 18, '0.02 0.03 0', '0 0 0', 1.0, 0x0, 0, 0);
			PlaySoundThing(snd_fireweap01a, rbot, 1.0, 0.5, 2.5, 0x80);
		}
		nextanim = 1 - nextanim;
		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
		SetTimerEx(0.65, 120, -1, -1); // wait for a short time before firing again
		return;
	}

	return;

use_weap2: // Bryar Pistol
	if (curweap != 2) // this weapon has not yet been mounted
	{
		call deselect_curweap;
		curweap = 2;
		SendMessageEx(skin, user7, 10303010, rbot, curweap, -1); // Update bot weapon mesh
		PlaySoundThing(mountSoundgun0, rbot, 1.0, -1, -1, 0x80);
		SetArmedMode(rbot, 1);
		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon mounted)
		KillTimerEx(120);
		SetTimerEx(0.5, 120, -1, -1); // clear cooldown after mount complete
		return;
	}

	if (target != -1 && disttotarg < 8.0 && HasLOS(rbot, target)) // target is in range
	{
		FireProjectile(rbot, projectile_weap02, snd_fireweap02, 8, '0.0135 0.1624 0.0', tempvector1, 1.0, 0x0, 0, 0);
		inv_energy = inv_energy - 1;
		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
		SetTimerEx(0.5 / powerboost, 120, -1, -1); // wait for a short time before firing again
		return;
	}

	return;

use_weap3: // Stormtrooper Rifle
	if (curweap != 3) // this weapon has not yet been mounted
	{
		call deselect_curweap;
		curweap = 3;
		SendMessageEx(skin, user7, 10303010, rbot, curweap, -1); // Update bot weapon mesh
		PlaySoundThing(mountSoundgun1, rbot, 1.0, -1, -1, 0x80);
		SetArmedMode(rbot, 1);
		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon mounted)
		KillTimerEx(120);
		SetTimerEx(0.5, 120, -1, -1); // clear cooldown after mount complete
		return;
	}

	if (target != -1 && disttotarg < 8.0 && HasLOS(rbot, target)) // target is in range
	{
		tempvector1 = VectorSet((Rand()-0.5)*5, (Rand()-0.5)*5, 0.0); // st-rifle is always inaccurate, override difficulty-based accuracy
		FireProjectile(rbot, projectile_weap03, snd_fireweap03, 8, '0.0168 0.1896 0.00', tempvector1, 1.0, 0x0, 0, 0);
		inv_energy = inv_energy - 2;
		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
		SetTimerEx(0.2 / powerboost, 120, -1, -1); // wait for a short time before firing again
		return;
	}

	return;

#use_weap4: // Thermal Detonators
#	if (curweap != 4) // this weapon has not yet been mounted
#	{
#		call deselect_curweap;
#		curweap = 4;
#		SendMessageEx(skin, user7, 10303010, rbot, curweap, -1); // Update bot weapon mesh
#		// Note: No mount sound
#		SetArmedMode(rbot, 0);
#		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon mounted)
#		KillTimerEx(120);
#		SetTimerEx(0.25, 120, -1, -1); // clear cooldown after mount complete
#		return;
#	}
#
#	if (target != -1 && 0.3 < disttotarg && disttotarg < 2.0 && HasLOS(rbot, target)) // target is in range
#	{
#		// TODO fire weapon
#		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
#		SetTimerEx(0.8, 120, -1, -1); // wait for a short time before firing again
#		return;
#	}
#
#	return;

use_weap5: // Crossbow
	if (curweap != 5) // this weapon has not yet been mounted
	{
		call deselect_curweap;
		curweap = 5;
		SendMessageEx(skin, user7, 10303010, rbot, curweap, -1); // Update bot weapon mesh
		PlaySoundThing(mountSoundgun0, rbot, 1.0, -1, -1, 0x80);
		SetArmedMode(rbot, 1);
		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon mounted)
		KillTimerEx(120);
		SetTimerEx(0.5, 120, -1, -1); // clear cooldown after mount complete
		return;
	}

	if (target != -1 && disttotarg < 8.0 && HasLOS(rbot, target)) // target is in range
	{
		FireProjectile(rbot, projectile_weap05b, snd_fireweap05a, 18, '0.0207 0.0888 0.00', tempvector1, 1.0, 0x0, 0, 0);
		inv_power = inv_power - 2;
		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
		SetTimerEx(0.6 / powerboost, 120, -1, -1); // wait for a short time before firing again
		return;
	}

	return;

use_weap6: // Repeater
	if (curweap != 6) // this weapon has not yet been mounted
	{
		call deselect_curweap;
		curweap = 6;
		SendMessageEx(skin, user7, 10303010, rbot, curweap, -1); // Update bot weapon mesh
		PlaySoundThing(mountSoundgun0, rbot, 1.0, -1, -1, 0x80);
		SetArmedMode(rbot, 1);
		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon mounted)
		KillTimerEx(120);
		SetTimerEx(0.5, 120, -1, -1); // clear cooldown after mount complete
		return;
	}

	if (target != -1 && disttotarg < 8.0 && HasLOS(rbot, target)) // target is in range
	{
		FireProjectile(rbot, projectile_weap06, snd_fireweap06, 8, '0.0186 0.0102 0.00', tempvector1, 1.0, 0x0, 0, 0);
		inv_power = inv_power - 1;
		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
		SetTimerEx(0.1 / powerboost, 120, -1, -1); // wait for a short time before firing again
		return;
	}

	return;

use_weap7: // Rail Detonator
	if (curweap != 7) // this weapon has not yet been mounted
	{
		call deselect_curweap;
		curweap = 7;
		SendMessageEx(skin, user7, 10303010, rbot, curweap, -1); // Update bot weapon mesh
		PlaySoundThing(mountSoundgun2, rbot, 1.0, -1, -1, 0x80);
		SetArmedMode(rbot, 1);
		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon mounted)
		KillTimerEx(120);
		SetTimerEx(0.5, 120, -1, -1); // clear cooldown after mount complete
		return;
	}

	if (target != -1 && disttotarg < 8.0 && HasLOS(rbot, target)) // target is in range
	{
		if (disttotarg > 0.8 || difficulty < 1) // primary fire - target is far enough away, or difficulty is too low
		{
			FireProjectile(rbot, projectile_weap07, snd_fireweap07, 18, '0.0214 0.15 0.00', tempvector1, 1.0, 0x0, 0, 0);
			ApplyForce(rbot, VectorScale(GetThingLVec(rbot), -40)); // Provide a kick backwards
			inv_railcharges = inv_railcharges - 1;
			weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
			SetTimerEx(1.0 / powerboost, 120, -1, -1); // wait for a short time before firing again
			return;
		}
		else // secondary fire - target is too close and difficulty allows secondary fire
		{
			FireProjectile(rbot, projectile_weap07a, snd_fireweap07, 18, '0.0214 0.15 0.00', tempvector1, 1.0, 0x0, 0, 0);
			ApplyForce(rbot, VectorScale(GetThingLVec(rbot), -40)); // Provide a kick backwards
			inv_railcharges = inv_railcharges - 1;
			weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
			SetTimerEx(1.0 / powerboost, 120, -1, -1); // wait for a short time before firing again
			return;
		}
		return;
	}

	return;

use_weap8: // Sequencer Charges
	if (curweap != 8) // this weapon has not yet been mounted
	{
		call deselect_curweap;
		curweap = 8;
		SendMessageEx(skin, user7, 10303010, rbot, curweap, -1); // Update bot weapon mesh
		// Note: No mount sound
		SetArmedMode(rbot, 0);
		// TODO: Implement proper mount wait
		// This code is called from the special info trigger, not the attacktarget: message
		// For now, just fall through and drop a mine
		// Then attacktarget: will switch back to ordinary weapon usage
		#weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon mounted)
		#KillTimerEx(120);
		#SetTimerEx(0.25, 120, -1, -1); // clear cooldown after mount complete
		#return;
	}

	// lay a mine (secondary fire)
	FireProjectile(rbot, projectile_weap08a, -1, 16, '0 0.05 0.00', '0 0 0', 1.0, 0x0, 0, 0);
	inv_weap8 = inv_weap8 - 1;
	weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
	SetTimerEx(0.8, 120, -1, -1); // wait for a short time before firing again
	return;

use_weap9: // Concussion Rifle
	if (curweap != 9) // this weapon has not yet been mounted
	{
		call deselect_curweap;
		curweap = 9;
		SendMessageEx(skin, user7, 10303010, rbot, curweap, -1); // Update bot weapon mesh
		PlaySoundThing(mountSoundgun1, rbot, 1.0, -1, -1, 0x80);
		SetArmedMode(rbot, 1);
		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon mounted)
		KillTimerEx(120);
		SetTimerEx(0.5, 120, -1, -1); // clear cooldown after mount complete
		return;
	}

	if (target != -1 && disttotarg < 8.0 && HasLOS(rbot, target)) // target is in range
	{
		if (disttotarg > 0.8 || difficulty < 1) // primary fire - target is far enough away, or difficulty is too low
		{
			FireProjectile(rbot, projectile_weap09, snd_fireweap09, 18, '0.02 0.15 0.0', tempvector1, 1.0, 0x0, 0, 0);
			ApplyForce(rbot, VectorScale(GetThingLVec(rbot), -80)); // Provide a kick backwards
			inv_power = inv_power - 8;
			weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
			SetTimerEx(1.2 / powerboost, 120, -1, -1); // wait for a short time before firing again
			return;
		}
		else // secondary fire - target is too close and difficulty allows secondary fire
		{
			FireProjectile(rbot, projectile_weap09a, snd_fireweap09, 18, '0.0 0.0 0.0', tempvector1, 1.0, 0x0, 0, 0);
			ApplyForce(rbot, VectorScale(GetThingLVec(rbot), -80)); // Provide a kick backwards
			inv_power = inv_power - 4;
			weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
			SetTimerEx(1.2 / powerboost, 120, -1, -1); // wait for a short time before firing again
			return;
		}
		return;
	}

	return;

use_weap10: // Lightsaber
	if (curweap != 10) // this weapon has not yet been mounted
	{
		call deselect_curweap;
		curweap = 10;
		SendMessageEx(skin, user7, 10303010, rbot, curweap, -1); // Update bot weapon mesh
		PlaySoundThing(mountSoundsaber, rbot, 1.0, -1, -1, 0x80); // Play saber mount sound
		humChannel = PlaySoundThing(humSound01, rbot, 1.0, -1, -1, 0x81); // Play resident saber noise
		SetThingLight(rbot, 0.65, 0.25); // Extra light for saber glow
		SetArmedMode(rbot, 2);
		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon mounted)
		KillTimerEx(120);
		SetTimerEx(1.0, 120, -1, -1); // clear cooldown after mount complete
		return;
	}

	if (target != -1 && disttotarg < 0.4 && HasLOS(rbot, target)) // target is in range
	{
		// Bot is going to swing the saber now, so stop any active saber block animation
		if (blocktrack != -1)
		{
			StopKey(rbot, blocktrack, 0.1);
			KillTimerEx(450); // cancel timer to clear blocktrack
			blocktrack = -1;
		}

		ClearActorFlags(rbot, 0x2000); // lightsaber auto-blocking

		if (GetMajorMode(rbot) == 5) // Underwater saber attacks
		{
			if (nextanim == 0)
				PlayMode(rbot, 8);
			else
				PlayMode(rbot, 18);
			nextanim = 1 - nextanim;
			slashsound = Rand()*8;
			PlaySoundThing(swingSound0[slashsound], rbot, 1.0, -1, -1, 0x80);
			SetTimerEx(0.5, 200, 50, 0); // fire damage projectile during the swing
			weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
			SetTimerEx(1.0, 120, -1, -1); // wait for a short time before firing again
			return;
		}
		else // Land based saber attacks
		{
			dot = ThingViewDot(rbot, target);
			// The bot is always trying to face its target, so the target will usually be in front of the bot
			// As a result, the dot is >0.9 most of the time, so we can make this check pretty sensitive
			if (dot > 0.95) // target is front of bot
			{
				tempflex1 = rand() * 3;
				if (tempflex1 > 2) // HEAVY Slash
				{
					PlayKey(rbot, chargeAnim, 2, 0x38);
					PlaySoundThing(swingSoundDbl01, rbot, 1.0, -1, -1, 0x80);
					SetTimerEx(0.4, 200, 160, 0); // fire damage projectile during the first swing
					SetTimerEx(0.9, 200, 160, 0); // fire damage projectile during the second swing
					weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
					SetTimerEx(2.0, 120, -1, -1); // wait for a short time before firing again
					return;
				}
				else if (tempflex1 > 1) // STANDING Strike
				{
					if (nextanim == 0)
						PlayKey(rbot, fireAnimF1, 2, 0x38);
					else
						PlayKey(rbot, fireAnimF2, 2, 0x38);
					nextanim = 1 - nextanim;
					slashsound = Rand()*8;
					PlaySoundThing(swingSound0[slashsound], rbot, 1.0, -1, -1, 0x80);
					SetTimerEx(0.3, 200, 50, 0); // fire damage projectile during the swing
					weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
					SetTimerEx(0.8, 120, -1, -1); // wait for a short time before firing again
					return;
				}
				else // QUICK Slash
				{
					PlayKey(rbot, snapAnim0[slash], 1, 0x38);
					PlaySoundThing(swingSound0[slash], rbot, 1.0, -1, -1, 0x80);

					// Shorter fire delay for the first two slashes
					if (slash < 2)
					{
						SetTimerEx(0.2, 200, 40, 0); // fire damage projectile during the swing
						slash = slash + 1;
						weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
						SetTimerEx(0.25, 120, -1, -1); // wait for a short time before firing again
						return;
					}

					// Longer fire delay for the third slash
					SetTimerEx(0.2, 200, 60, 0); // fire damage projectile during the swing
					slash = 0;
					weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
					SetTimerEx(1.0, 120, -1, -1); // wait for a short time before firing again
					return;
				}
			}
			else
			{
				tempvector1 = VectorSub(GetThingPos(target), GetThingPos(rbot));
				if (VectorDot(tempvector1, GetThingRVec(rbot)) > 0) // LEFT Regular Strike
				{
					PlayKey(rbot, fireAnimL1, 1, 0x38); // Left strafe attack = Slash to the right
					slashSound = Rand() * 8;
					PlaySoundThing(swingSound0[slashSound], rbot, 1.0, -1, -1, 0x80);
					SetTimerEx(0.3, 200, 50, -40); // fire damage projectile during the swing
					weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
					SetTimerEx(0.8, 120, -1, -1); // wait for a short time before firing again
					return;
				}
				else // RIGHT Regular Strike
				{
					PlayKey(rbot, fireAnimR1, 1, 0x38); // Right strafe attack = Slash to the left
					slashSound = Rand() * 8;
					PlaySoundThing(swingSound0[slashSound], rbot, 1.0, -1, -1, 0x80);
					SetTimerEx(0.3, 200, 50, 40); // fire damage projectile during the swing
					weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
					SetTimerEx(0.8, 120, -1, -1); // wait for a short time before firing again
					return;
				}
			}
		}
		return;
	}

	SetActorFlags(rbot, 0x2000); // lightsaber auto-blocking

	return;

use_weap12: // Blastech Pistol
	if (curweap != 12) // this weapon has not yet been mounted
	{
		call deselect_curweap;
		curweap = 12;
		SendMessageEx(skin, user7, 10303010, rbot, curweap, -1); // Update bot weapon mesh
		PlaySoundThing(mountSoundgun0, rbot, 1.0, -1, -1, 0x80);
		SetArmedMode(rbot, 1);
		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon mounted)
		chargecount = 0; // not yet firing, clear charge count
		KillTimerEx(120);
		SetTimerEx(0.5, 120, -1, -1); // clear cooldown after mount complete
		return;
	}

	if (target != -1 && disttotarg < 8.0 && HasLOS(rbot, target)) // target is in range
	{
		if (chargecount > 0)
		{
			for (i = 0 ; i < chargecount ; i = i + 1)
			{
				FireProjectile(rbot, projectile_weap02, snd_fireweap12, 8, '0.0135 0.1624 0.0', tempvector1, 1.0, 0x0, 0, 0);
			}
			chargecount = 0; // clear charge count after firing
			weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
			SetTimerEx(0.75 / powerboost, 120, -1, -1); // wait for a short time before firing again
			return;
		}

		FireProjectile(rbot, projectile_weap02, snd_fireweap12, 8, '0.0135 0.1624 0.0', tempvector1, 1.0, 0x0, 0, 0);
		inv_energy = inv_energy - 1;
		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
		SetTimerEx(0.5 / powerboost, 120, -1, -1); // wait for a short time before firing again
		return;
	}

	// Charge weapon until we find a target
	if (chargecount < 4)
	{
		PlaySoundThing(chargeSoundgun12, rbot, 1.0, -1.0, -1.0, 0x80);
		chargecount = chargecount + 1;
		inv_energy = inv_energy - 1;
		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
		SetTimerEx(0.75 / powerboost, 120, -1, -1); // wait for a short time before firing again
		return;
	}

	return;

use_weap13: // Stormtrooper Scope
	if (curweap != 13) // this weapon has not yet been mounted
	{
		call deselect_curweap;
		curweap = 13;
		SendMessageEx(skin, user7, 10303010, rbot, curweap, -1); // Update bot weapon mesh
		PlaySoundThing(mountSoundgun1, rbot, 1.0, -1, -1, 0x80);
		SetArmedMode(rbot, 1);
		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon mounted)
		KillTimerEx(120);
		SetTimerEx(0.5, 120, -1, -1); // clear cooldown after mount complete
		return;
	}

	if (target != -1 && disttotarg < 12.0 && HasLOS(rbot, target)) // target is in range
	{
		FireProjectile(rbot, projectile_weap13, snd_fireweap03, -1, '0.0 0.0 0.035', tempvector1, 1.0, 0x0, 0, 0);
		inv_energy = inv_energy - 4;
		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
		SetTimerEx(0.5 / powerboost, 120, -1, -1); // wait for a short time before firing again
		return;
	}

	return;

#use_weap14: // Flash Bombs
#	if (curweap != 14) // this weapon has not yet been mounted
#	{
#		call deselect_curweap;
#		curweap = 14;
#		SendMessageEx(skin, user7, 10303010, rbot, curweap, -1); // Update bot weapon mesh
#		// Note: No mount sound
#		SetArmedMode(rbot, 0);
#		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon mounted)
#		KillTimerEx(120);
#		SetTimerEx(0.25, 120, -1, -1); // clear cooldown after mount complete
#		return;
#	}
#
#	if (target != -1 && 0.3 < disttotarg && disttotarg < 2.0 && HasLOS(rbot, target)) // target is in range
#	{
#		// TODO fire weapon
#		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
#		SetTimerEx(0.8, 120, -1, -1); // wait for a short time before firing again
#		return;
#	}
#
#	return;

use_weap17: // Rail Seeker
	if (curweap != 17) // this weapon has not yet been mounted
	{
		call deselect_curweap;
		curweap = 17;
		SendMessageEx(skin, user7, 10303010, rbot, curweap, -1); // Update bot weapon mesh
		PlaySoundThing(mountSoundgun2, rbot, 1.0, -1, -1, 0x80);
		SetArmedMode(rbot, 1);
		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon mounted)
		KillTimerEx(120);
		SetTimerEx(0.5, 120, -1, -1); // clear cooldown after mount complete
		return;
	}

	if (target != -1 && disttotarg < 8.0 && HasLOS(rbot, target)) // target is in range
	{
		// Note: Only primary fire is implemented here (this is why the user data is set to 5000+target).
		// Secondary fire is essentially the same except that the projectile has a shorter fuse.
		// This doesn't seem particularly useful and it is barely noticeable, so we may as well always use primary fire.
		FireProjectileData(rbot, projectile_weap17, snd_fireweap07, 18, '0.0214 0.15 0.00', tempvector1, 1.0, 0x0, 0, 0, 5000+target);
		ApplyForce(rbot, VectorScale(GetThingLVec(rbot), -40)); // Provide a kick backwards
		inv_seekercharges = inv_seekercharges - 1;
		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
		SetTimerEx(1.0 / powerboost, 120, -1, -1); // wait for a short time before firing again
		return;
	}

	return;

use_weap20: // Carbonite Gun
	if (curweap != 20) // this weapon has not yet been mounted
	{
		call deselect_curweap;
		curweap = 20;
		SendMessageEx(skin, user7, 10303010, rbot, curweap, -1); // Update bot weapon mesh
		PlaySoundThing(mountSoundgun0, rbot, 1.0, -1, -1, 0x80);
		SetArmedMode(rbot, 1);
		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon mounted)
		clearhitlist = 1; // not yet firing, clear hit list
		KillTimerEx(120);
		SetTimerEx(0.5, 120, -1, -1); // clear cooldown after mount complete
		return;
	}

	if (target != -1 && disttotarg < 1.5 && HasLOS(rbot, target)) // target is in range
	{
		if (disttotarg < 0.5 && GetThingFlags(target) & 0x4 && GetThingFlags(target) & 0x10 && GetActorFlags(target) & 0x40 && GetActorFlags(target) & 0x40000 && GetActorFlags(target) & 0x200000) // close enough and target is frozen in carbonite
		{
			// Try to shatter frozen target with secondary fire
			FireProjectile(rbot, projectile_weap20a, snd_fireweap01, 44, '0.02 0.03 0', '0 0 0', 1.0, 0x0, 0, 0);
			weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
			SetTimerEx(1.5, 120, -1, -1); // wait for a short time before firing again
			return;
		}

		if (clearhitlist)
		{
			// When we first start firing the carbonite gun, clear the hit list
			// Stale entries may cause those things to freeze sooner than they should
			for (i = 0 ; i < 10 ; i = i + 1)
			{
				hitList0[i] = -1;
			}
			clearhitlist = 0;
		}

		// Try to freeze target with primary fire
		tempvector1 = VectorSet((Rand()-0.5)*2, (Rand()-0.5)*2, 0.0);
		dummy = FireProjectile(rbot, projectile_weap20, snd_fireweap20, 8, '0.0135 0.1624 0.0', tempvector1, 4.0, 0x1, 0, 0);
		SetThingCollideSize(dummy, 0.2);
		inv_carbopellets = inv_carbopellets - 0.2;

		// Look for victims to freeze
		hitSide = 1 - hitSide;
		potential = FirstThingInView(rbot, 45, 1.5, 0x404);
		while (potential != -1)
		{
			// See if this actor can be frozen
			if (potential != rbot && !(GetActorFlags(potential) & 0x100) && !(GetThingFlags(potential) & 0x4) && !(GetPhysicsFlags(potential) & 0x2000000)) // not a droid actor, not mag-sealed (i.e. super shield or carbo freeze), not immune to carbo freeze
			{
				// See if this actor is in range to be frozen
				if (VectorDist(GetThingPos(potential), GetThingPos(rbot)) < 1.5 && HasLOS(potential, rbot)) // in range and clear LOS
				{
					// If the actor is already in the hit list, increment the hit count
					for (i = 0 ; i < 10 ; i = i + 1)
					{
						if (hitList0[i] == potential) // actor is in the hit list already
						{
							hitCount0[i] = hitCount0[i] + 1;
							lastHit0[i] = hitSide;

							if (hitCount0[i] == 5)
							{
								SendMessageEx(GetThingClassCog(potential), skill, 1035, 6.0, -1, -1);
								hitList0[i] = -1;
							}

							i = 20; // break + mark as found
						}
					}

					if (i != 20) // actor is not in the hit list
					{
						// Add actor to the hit list
						for (i = 0 ; i < 10 ; i = i + 1)
						{
							if (hitList0[i] == -1) // vacant slot
							{
								hitList0[i] = potential;
								hitCount0[i] = 1;
								lastHit0[i] = hitSide;
								// Note: There is no break here.
								// This means that the potential will be assigned to all vacant slots.
								// On the next fire round, the hit count will increment for only the first match in the hit list.
								// The culling code below will remove the duplicates from the hit list.
								// So another potential can be added to the hit list on the fire round following the cull.
								// In other words, one potential actor may be added to the hit list at most every other fire round.
								// This is the behavior of the original carbonite gun weapon cog by LEC.
								// That behavior is replicated here to avoid giving bots an unfair tactical advantage over players.
							}
						}
					}
				}
			}

			potential = NextThingInView();
		}

		// Cull any things that were not hit this time
		for (i = 0 ; i < 10 ; i = i + 1)
		{
			if (hitList0[i] !=-1 && lastHit0[i] != hitSide) // this actor wasn't hit this time
			{
				hitList0[i] = -1;
			}
		}

		// Note: cooldown is not affected by powerboost
		weaponmode = BitSet(weaponmode, 0x1); // weapon cooldown (weapon fired)
		SetTimerEx(0.2, 120, -1, -1); // wait for a short time before firing again
		return;
	}

	clearhitlist = 1; // stopped firing, clear hit list

	return;

end
