# Rbot Startup Cog
#
# Server-only
# Type ID: 1010
#
# Rbots originally created by Raynar
# Additional code by Hell Raiser

flags=0x240

symbols

message		startup
message		trigger
message		timer
message		user7

# Initial number of bots
int			numbots=4

# Game setup options
int			allowsaber=1
int			allowguns=1
int			allowforce=1
int			difficulty=2
int			respawn_mask0=0					# Team 0 (non-team play)
int			respawn_mask1=0					# Team 1 (red)
int			respawn_mask2=0					# Team 2 (gold)
int			respawn_mask3=0					# Team 3 (blue)
int			respawn_mask4=0					# Team 4 (green)

int			gamemode							local
int			maxbots								local

# References to rbot-srv.cog instances
cog			srv0=-1								local
cog			srv1=-1								local
cog			srv2=-1								local
cog			srv3=-1								local
cog			srv4=-1								local
cog			srv5=-1								local
cog			srv6=-1								local
cog			srv7=-1								local
cog			srv8=-1								local
cog			srv9=-1								local
cog			srv10=-1							local
cog			srv11=-1							local
cog			srv12=-1							local
cog			srv13=-1							local
cog			srv14=-1							local
cog			srv15=-1							local
cog			srv16=-1							local
cog			srv17=-1							local
cog			srv18=-1							local
cog			srv19=-1							local
cog			srv20=-1							local
cog			srv21=-1							local
cog			srv22=-1							local
cog			srv23=-1							local
cog			srv24=-1							local
cog			srv25=-1							local
cog			srv26=-1							local
cog			srv27=-1							local
cog			srv28=-1							local
cog			srv29=-1							local
cog			srv30=-1							local
cog			srv31=-1							local

# Respawn locations
thing		respawn0							local
thing		respawn1							local
thing		respawn2							local
thing		respawn3							local
thing		respawn4							local
thing		respawn5							local
thing		respawn6							local
thing		respawn7							local
thing		respawn8							local
thing		respawn9							local
thing		respawn10							local
thing		respawn11							local
thing		respawn12							local
thing		respawn13							local
thing		respawn14							local
thing		respawn15							local
thing		respawn16							local
thing		respawn17							local
thing		respawn18							local
thing		respawn19							local
thing		respawn20							local
thing		respawn21							local
thing		respawn22							local
thing		respawn23							local
thing		respawn24							local
thing		respawn25							local
thing		respawn26							local
thing		respawn27							local
thing		respawn28							local
thing		respawn29							local
thing		respawn30							local
thing		respawn31							local
int			maxrespawn							local

# Respawn flags
# 0x1  = disabled spawn point
# 0x2  = bot cannot respawn here in non-team play
# 0x4  = bot cannot respawn here if on team 1 (red)
# 0x8  = bot cannot respawn here if on team 2 (gold)
# 0x10 = bot cannot respawn here if on team 3 (blue)
# 0x20 = bot cannot respawn here if on team 4 (green)
int			respawn_flags0=0					local
int			respawn_flags1=0					local
int			respawn_flags2=0					local
int			respawn_flags3=0					local
int			respawn_flags4=0					local
int			respawn_flags5=0					local
int			respawn_flags6=0					local
int			respawn_flags7=0					local
int			respawn_flags8=0					local
int			respawn_flags9=0					local
int			respawn_flags10=0					local
int			respawn_flags11=0					local
int			respawn_flags12=0					local
int			respawn_flags13=0					local
int			respawn_flags14=0					local
int			respawn_flags15=0					local
int			respawn_flags16=0					local
int			respawn_flags17=0					local
int			respawn_flags18=0					local
int			respawn_flags19=0					local
int			respawn_flags20=0					local
int			respawn_flags21=0					local
int			respawn_flags22=0					local
int			respawn_flags23=0					local
int			respawn_flags24=0					local
int			respawn_flags25=0					local
int			respawn_flags26=0					local
int			respawn_flags27=0					local
int			respawn_flags28=0					local
int			respawn_flags29=0					local
int			respawn_flags30=0					local
int			respawn_flags31=0					local

# Bot scores
int			botscore0							local
int			botscore1							local
int			botscore2							local
int			botscore3							local
int			botscore4							local
int			botscore5							local
int			botscore6							local
int			botscore7							local
int			botscore8							local
int			botscore9							local
int			botscore10							local
int			botscore11							local
int			botscore12							local
int			botscore13							local
int			botscore14							local
int			botscore15							local
int			botscore16							local
int			botscore17							local
int			botscore18							local
int			botscore19							local
int			botscore20							local
int			botscore21							local
int			botscore22							local
int			botscore23							local
int			botscore24							local
int			botscore25							local
int			botscore26							local
int			botscore27							local
int			botscore28							local
int			botscore29							local
int			botscore30							local
int			botscore31							local

# Misc vars
int			botname								local
thing		rbot								local
thing		deadbot								local
int			botid								local
int			i									local
int			rndpos								local
thing		newpos								local
int			respawn_flags						local
int			mask_flag							local
int			attempts							local
int			team								local
thing		killer								local
int			killertype							local
int			killerid							local # botid
int			killername							local
int			maxthings							local
int			highscore							local
thing		highscorer							local
template	walkplayer_temp=walkplayer			local
template	ghost_temp=rbot_respawn				local
int			lastkilled							local # player thing or botid
thing		player								local
cog			srv									local

end

# Code Section

code

startup:
	if (IsMulti() && !IsServer()) return; // Host only

	// Allow other server-side cogs to discover this one by its type
	SendTrigger(-1, 1852000, 1010, GetSelfCog(), -1, -1);

	// Create respawn locations from walkplayers
	maxthings = GetThingCount();
	maxrespawn = 0;
	mask_flag = 0x1;
	for (i = 0; i < maxthings; i = i + 1)
	{
		if (GetThingTemplate(i) == walkplayer_temp)
		{
			// Create respawn point
			respawn0[maxrespawn] = CreateThing(ghost_temp, i);

			// Set up respawn mask flags
			respawn_flags = 0x0;
			if (BitTest(respawn_mask0, mask_flag)) respawn_flags = BitSet(respawn_flags, 0x2);
			if (BitTest(respawn_mask1, mask_flag)) respawn_flags = BitSet(respawn_flags, 0x4);
			if (BitTest(respawn_mask2, mask_flag)) respawn_flags = BitSet(respawn_flags, 0x8);
			if (BitTest(respawn_mask3, mask_flag)) respawn_flags = BitSet(respawn_flags, 0x10);
			if (BitTest(respawn_mask4, mask_flag)) respawn_flags = BitSet(respawn_flags, 0x20);
			respawn_flags0[maxrespawn] = respawn_flags;

			// Prepare for next respawn point
			maxrespawn = maxrespawn + 1;
			mask_flag = mask_flag * 2; // mask_flag << 1 (bit shift)
		}
	}

	// Allow a brief delay for the game to settle
	sleep(2.0);

	// Count the number of available bots
	maxbots = 0;
	for (i = 0; i < 32; i = i + 1)
	{
		if (srv0[i] != -1)
		{
			maxbots = maxbots + 1;
		}
		else
		{
			i = 32; // break - end of list, no gaps allowed
		}
	}
	if (numbots > maxbots) numbots = maxbots;

	// Determine game settings
	gamemode = 0x0;
	if (allowguns) gamemode = BitSet(gamemode, 0x01); else gamemode = BitClear(gamemode, 0x01); // allow guns or not
	if (allowsaber) gamemode = BitSet(gamemode, 0x02); else gamemode = BitClear(gamemode, 0x02); // allow sabers or not
	if (allowforce) gamemode = BitSet(gamemode, 0x04); else gamemode = BitClear(gamemode, 0x04); // allow force or not
	if (GetMultiModeFlags() & 0x1) gamemode = BitSet(gamemode, 0x08); else gamemode = BitClear(gamemode, 0x08); // team play or not

	// Looks at player state to determine some initial game settings
	// Note: This is a convenience feature in case the Rbot Admin functions
	// are not being used (i.e. other mods are active)
	player = GetLocalPlayerThing();
	if (GetCurWeapon(player) == 1)
	{
		// Host player is using fists - tell bots to use fists only
		gamemode = BitClear(gamemode, 0x3); // Disable use of guns and sabers
	}
	if (allowsaber && (GetCurWeapon(player) == 10 || GetCurWeapon(player) == 11))
	{
		// Host player is using saber - tell bots to use sabers only
		gamemode = BitClear(gamemode, 0x1); // Disable use of guns
	}
	if (GetInv(player, 20) == 0)
	{
		// Host player has no force powers - tell bots not to use force powers
		gamemode = BitClear(gamemode, 0x4); // Disable use of force
	}

	// Broadcast initial game setup options
	SendTrigger(-1, 800, gamemode, difficulty, -1, -1);

	// Startup each bot
	for (botid = 0; botid < numbots; botid = botid + 1)
	{
		call addbot;
	}

	lastkilled = -1; // hack to make sure multiple triggers do not respawn more than 1 bot
	return;

trigger:
	if (IsMulti() && !IsServer()) return; // Host only

	if (GetSourceRef() == 910) // Add bot
	{
		numbots = numbots + 1;
		if (numbots > maxbots)
		{
			// Kill all bots
			numbots = 0;
			SetTimerEx(0.5, 110, -1, -1); // wait 0.5 secs before killing off all bots
		}
		else
		{
			botid = numbots - 1;
			call addbot;
		}
		call display_bot_count;
	}

	if (GetSourceRef() == 920) // Remove bot
	{
		if (numbots > 0)
		{
			numbots = numbots - 1;
			botid = numbots;
			call removebot;
		}
		call display_bot_count;
		return;
	}

	if (GetSourceRef() == 930) // Set difficulty level
	{
		difficulty = difficulty + 1;
		if (difficulty > 4) difficulty = 0;
		SendTrigger(-1, 800, gamemode, difficulty, -1, -1);
		jkStringClear();
		jkStringConcatAsciiString("Difficulty: ");
		jkStringConcatUNIString(3000+difficulty);
		jkStringOutput(-3, -1);
		return;
	}

	if (GetSourceRef() == 990) // Bot Killed Player [HR]
	{
		player = GetSenderRef();
		killer = GetParam(1);

		if (lastkilled == player) return; // hack to stop multiple 'player killed' messages
		lastkilled = player;
		SetTimerEx(3.0, 120, -1, -1); // wait 3 secs before resetting 'lastkilled'

		// Work out the botid of the killer
		killerid = -1;
		killername = -1;
		for (i = 0; i < numbots; i = i + 1)
		{
			srv = srv0[i];
			rbot = SendMessageEx(srv, user7, 1013, -1, -1, -1);
			if (rbot == killer)
			{
				killerid = i;
				killername = SendMessageEx(srv, user7, 1001, -1, -1, -1);
				i = numbots; // break
			}
		}

		if (killerid != -1)
		{
			// JK will count bot killing player as a suicide, so cancel it out [HR]
			SetPlayerScore(player, GetPlayerScore(player) + 1);
			SetPlayerSuicides(player, GetPlayerSuicides(player) - 1); 

			// Display an appropriate "killed by" message
			jkStringClear();
			jkStringConcatPlayerName(player);
			jkStringConcatAsciiString(" was killed by ");
			jkStringConcatUNIString(1000+killername);
			jkStringOutput(-3, -1);

			// Figure bot score and spit it out [HR]
			botscore0[killerid] = botscore0[killerid] + 1;
			jkStringClear();
			jkStringConcatUNIString(1000+killername);
			jkStringConcatAsciiString("'s Score: ");
			jkStringConcatInt(botscore0[killerid]);
			jkStringOutput(-3, -1);
		}
		return;
	}

	if (GetSourceRef() == 1000) // bot died
	{
		botid = GetParam(0);
		deadbot = GetParam(1);
		killer = GetParam(2);

		if (lastkilled == deadbot) return; // hack to stop multiple 'bot killed' messages
		lastkilled = deadbot;
		SetTimerEx(3.0, 120, -1, -1); // wait 3 secs before reseting 'lastkilled'

		if (botid >= numbots) return; // bot removed from game - failsafe

		srv = srv0[botid];
		botname = SendMessageEx(srv, user7, 1001, -1, -1, -1);

		SetTimerEx(5.0, 100, botid, deadbot); // set timer to 5 secs, and send 'who died'
		killertype = GetThingType(killer); // 2-actor  10-player

		jkStringClear();
		jkStringConcatUNIString(1000+botname); // print bot name

		if (killertype == 2) // actor
		{
			// Work out the botid of the killer
			killerid = -1;
			killername = -1;
			for (i = 0; i < numbots; i = i + 1)
			{
				srv = srv0[i];
				rbot = SendMessageEx(srv, user7, 1013, -1, -1, -1);
				if (rbot == killer)
				{
					killerid = i;
					killername = SendMessageEx(srv, user7, 1001, -1, -1, -1);
					i = numbots; // break
				}
			}

			if (killerid == botid) // bot killed itself 
			{
				jkStringConcatUNIString(2000+rand()*5); // print death message
				jkStringOutput(-3, -1);

				// Figure bot score and spit it out [HR]
				botscore0[botid] = botscore0[botid] - 1;					
				jkStringClear();
				jkStringConcatUNIString(1000+botname);
				jkStringConcatAsciiString("'s Score: ");
				jkStringConcatInt(botscore0[botid]);
				jkStringOutput(-3, -1);
			}
			else
			{
				jkStringConcatAsciiString(" was killed by ");
				if (killerid != -1) jkStringConcatUNIString(1000+killername); else jkStringConcatAsciiString("unknown");
				jkStringOutput(-3, -1);

				// Figure bot score and spit it out [HR]
				botscore0[killerid] = botscore0[killerid] + 1;					
				jkStringClear();
				jkStringConcatUNIString(1000+killername);
				jkStringConcatAsciiString("'s Score: ");
				jkStringConcatInt(botscore0[killerid]);
				jkStringOutput(-3, -1);
			}
		}
		else if (killertype == 10) //player
		{
			jkStringConcatAsciiString(" was killed by ");
			jkStringConcatPlayerName(killer); 
			jkStringOutput(-3, -1);

			SetPlayerKills(killer, GetPlayerKills(killer) + 1); // give player credit
			SetPlayerScore(killer, GetPlayerScore(killer) + 1); // give player a point [HR]
		}
		else // bot killed itself
		{
			jkStringConcatUNIString(2000+rand()*5); // print death message
			jkStringOutput(-3, -1);

			// Figure bot score and spit it out [HR]
			botscore0[botid] = botscore0[botid] - 1;					
			jkStringClear();
			jkStringConcatUNIString(1000+botname);
			jkStringConcatAsciiString("'s Score: ");
			jkStringConcatInt(botscore0[botid]);
			jkStringOutput(-3, -1);
		}
		return;
	}

	if (GetSourceRef() == 101050) // ask for highest scorer
	{
		// TODO: Not currently used, but this would enable a bot to e.g. prefer the leading bot when selecting a target for attack
		botid = GetParam(0);
		highscore = 0;
		highscorer = -1;
		for (i = 0; i < numbots; i = i + 1)
		{
			if (botscore0[i] > highscore)
			{
				highscore = botscore0[i];
				srv = srv0[i];
				highscorer = SendMessageEx(srv, user7, 1013, -1, -1, -1); // bot thing
			}
		}
		SendTrigger(0, 101051, botid, highscorer, -1, -1); // return highest scorer
		return;
	}

	if (GetSourceRef() == 1852000) // Rbot cog type discovery
	{
		if (GetParam(0) == 1020) // rbot-srv.cog
		{
			botid = GetParam(2);
			srv0[botid] = GetParam(1);
		}
		return;
	}

	return;

timer:
	if (IsMulti() && !IsServer()) return; // Host only

	if (GetSenderId() == 90) // respawn flag reset
	{
		respawn_flags0[GetParam(0)] = BitClear(respawn_flags0[GetParam(0)], 0x1); // allow to use the respawn position again
		return;
	}

	if (GetSenderId() == 100) // respawn new bot
	{
		botid = GetParam(0);
		deadbot = GetParam(1);
		DestroyThing(deadbot); // Remove corpse from the game
		if (botid < numbots) call addbot; // make sure that the killed bot is allowed to respawn (altered number of bots)
		return;
	}

	if (GetSenderId() == 110) // kill off all bots
	{
		for (botid = 0; botid < maxbots; botid = botid + 1)
		{
			call removebot;
		}
		return;
	}

	if (GetSenderId() == 120) // Reset lastkilled
	{
		lastkilled = -1;
		return;
	}

	return;

// Execute public API function for this cog
// Param 0 = Function ID
// The remaining params will be processed according to the requested function
// For example, param1 might be an index into an array.
// Returns the function-specific result of the execution
user7:
	if (IsMulti() && !IsServer()) return; // Host only

	if (GetParam(0) == 1000) ReturnEx(numbots);
	if (GetParam(0) == 1001) ReturnEx(maxbots);
	if (GetParam(0) == 1002) ReturnEx(gamemode);
	if (GetParam(0) == 2002)
	{
		gamemode = GetParam(1);
		// Broadcast updated game setup options
		SendTrigger(-1, 800, gamemode, difficulty, -1, -1);
		return;
	}
	return;

addbot:
	srv = srv0[botid];
	team = SendMessageEx(srv, user7, 1002, -1, -1, -1);

	// Figure out respawn mask based on the bot's team
	mask_flag = 0x2; // Default - Non-team mask
	if (team == 1) mask_flag = 0x4; // Red team mask
	if (team == 2) mask_flag = 0x8; // Gold team mask
	if (team == 3) mask_flag = 0x10; // Blue team mask
	if (team == 4) mask_flag = 0x20; // Green team mask

	// Randomly select an available respawn point
	newpos = -1;
	// There are some edge cases that could cause the game to lock up (due to
	// infinite loop) if there are no available spawn points.  For example,
	// spamming the "Add Bot" function in slow motion mode.  To help avoid this
	// situation, ignore the disabled (0x1) flag after we have made a reasonable
	// effort to place the bot at an unoccupied spawn point.
	attempts = 10000;
	while (newpos == -1)
	{
		rndpos = maxrespawn * Rand();
		// In order to use this spawn point, it must not be disabled (0x1) and must be usable by the bot's team
		if ((!BitTest(respawn_flags0[rndpos], 0x1) || attempts == 0) && !BitTest(respawn_flags0[rndpos], mask_flag))
		{
			newpos = respawn0[rndpos];
		}
		if (attempts > 0) attempts = attempts - 1;
	}

	// Temporarily disable use of the selected spawn point until after a short delay
	// This helps disperse the bots at startup and prevents mass-spawning at a single point
	respawn_flags0[rndpos] = BitSet(respawn_flags0[rndpos], 0x1); // Disabled
	SetTimerEx(2.0, 90, rndpos, -1); // Re-enable spawn point after delay

	SendTrigger(-1, 900, botid, newpos, gamemode, difficulty); // tell srv to spawn bot
	return;

removebot:
	SendTrigger(-1, 901, botid, -1, -1, -1); // tell srv to remove bot
	return;

display_bot_count:
	jkStringClear();
	jkStringConcatAsciiString("Number of bots: ");
	jkStringConcatInt(numbots);
	jkStringOutput(-3, -1);
	return;

end
