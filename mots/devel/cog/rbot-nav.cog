# Rbot Navigation Cog
#
# Server-only
# Type ID: 1060
#
# Rbots originally created by Raynar
# Additional code by Hell Raiser

flags=0x240

symbols

message		startup
message		trigger
message		user7

# The default size for a node.  This is used if the node thing does not have a
# value set for its "size" property in the JKL.
flex		dflt_nodesize=0.25

int			path_size_max=25					local # Keep in sync with path cog

# We can't dynamically create 'ghost' things (they can only be statically
# placed in the JKL), so we create '_ghostdecor' things instead, which are
# virtually identical.
template	ghost=_ghostdecor					local

cog			spnav=-1							local
cog			firstpath=-1						local

# Temporary node things for each bot
thing		node0=-1							local
thing		node1=-1							local
thing		node2=-1							local
thing		node3=-1							local
thing		node4=-1							local
thing		node5=-1							local
thing		node6=-1							local
thing		node7=-1							local
thing		node8=-1							local
thing		node9=-1							local
thing		node10=-1							local
thing		node11=-1							local
thing		node12=-1							local
thing		node13=-1							local
thing		node14=-1							local
thing		node15=-1							local
thing		node16=-1							local
thing		node17=-1							local
thing		node18=-1							local
thing		node19=-1							local
thing		node20=-1							local
thing		node21=-1							local
thing		node22=-1							local
thing		node23=-1							local
thing		node24=-1							local
thing		node25=-1							local
thing		node26=-1							local
thing		node27=-1							local
thing		node28=-1							local
thing		node29=-1							local
thing		node30=-1							local
thing		node31=-1							local

# Working variables
int			i									local

flex		x									local
flex		y									local
flex		z									local

int			path_index							local
int			node_index							local
int			path_size							local
int			pathflags							local
thing		nodeghost							local
thing		node								local
int			nodenum								local
vector		nodepos								local
sector		nodesec								local
flex		nodesize							local
int			nodeflags							local
flex		dist								local
int			path_rank							local
flex		weight								local

int			new_path_id							local
int			new_path_size						local
int			new_pathflags						local
thing		new_nodenum							local
vector		new_nodepos							local
sector		new_nodesec							local
flex		new_nodesize						local
int			new_nodeflags						local
flex		new_dist							local
int			new_path_rank						local
int			new_path_rundir						local
flex		new_weight							local

vector		bot_z								local
vector		new_node_z							local
vector		bot_pos								local

int			botid								local
thing		rbot								local
cog			srv									local
cog			path								local
cog			cur_path							local
int			botmode								local
int			lastposnum							local
int			nextposnum							local
int			rundir								local
int			changepath							local
flex		total_weight						local
int			new_path_end						local
int			new_path_requirements				local
int			bot_keys							local
int			navspecial							local

end

code

startup:
	if (IsMulti() && !IsServer()) return; // Host only

	// Allow other server-side cogs to discover this one by its type
	SendTrigger(-1, 1852000, 1060, GetSelfCog(), -1, -1);
	return;

trigger:
	if (IsMulti() && !IsServer()) return; // Host only

	if (GetSourceRef() == 1852000) // Rbot cog type discovery
	{
		if (GetParam(0) == 1061) // rbot-nav-special.cog
		{
			spnav = GetParam(1);
		}
		if (GetParam(0) == 1070) // rbot-path.cog
		{
			firstpath = GetParam(1);
		}
		return;
	}

	return;

// Execute public API function for this cog
// Param 0 = Function ID
// The remaining params will be processed according to the requested function
// For example, param1 might be an index into an array.
// Returns the function-specific result of the execution
user7:
	if (GetParam(0) == 10603000) // Request navigation update
	{
		rbot = GetParam(1);
		lastposnum = GetParam(2);

		srv = GetThingClassCog(rbot);
		botid = SendMessageEx(srv, user7, 10201000, -1, -1, -1);
		botmode = SendMessageEx(srv, user7, 10201003, -1, -1, -1);
		bot_keys = SendMessageEx(srv, user7, 10201028, -1, -1, -1);

		if (lastposnum == -1) // bot lost - find nearest node
		{
			path_index = -1;
			node_index = -1;
			node = -1;
			nodenum = -1;
			nodepos = '0 0 0';
			nodesec = -1;
			nodesize = 0;
			nodeflags = 0;
			dist = 10000;
			rundir = -1;

			bot_pos = GetThingPos(rbot);
			bot_z = VectorSet(0, 0, VectorZ(bot_pos));

			path = firstpath;
			while (path != -1)
			{
				SendMessageEx(path, user7, 10703000, rbot, -1, -1);
				new_path_id = SendMessageEx(path, user7, 10701000, -1, -1, -1);
				new_path_size = SendMessageEx(path, user7, 10701001, -1, -1, -1);
				new_path_requirements = SendMessageEx(path, user7, 10701002, -1, -1, -1);
				new_pathflags = SendMessageEx(path, user7, 10701003, -1, -1, -1);
				new_path_rundir = SendMessageEx(path, user7, 10701005, -1, -1, -1);

				if (!BitTest(new_pathflags, 0x4) && BitClear(new_path_requirements, bot_keys) == 0) // Path is not disabled and bot has all the keys, etc. necessary to use this path
				{
					for (i = 0 ; i < new_path_size ; i = i + 1)
					{
						new_nodenum = SendMessageEx(path, user7, 10701100, i, -1, -1);
						x = SendMessageEx(path, user7, 10701101, i, -1, -1);
						y = SendMessageEx(path, user7, 10701102, i, -1, -1);
						z = SendMessageEx(path, user7, 10701103, i, -1, -1);
						new_nodepos = VectorSet(x, y, z);
						new_nodesec = SendMessageEx(path, user7, 10701104, i, -1, -1);
						new_nodesize = SendMessageEx(path, user7, 10701105, i, -1, -1);
						new_nodeflags = SendMessageEx(path, user7, 10701106, i, -1, -1);

						if (new_nodenum != nodenum) // No need to compare against self
						{
							// See if any special navigation flags have been set for this node
							navspecial = 0x0;
							if (spnav != -1) navspecial = SendMessageEx(spnav, user7, 10613000, new_nodenum, -1, -1);

							if (!BitTest(navspecial, 0x1)) // A lost bot is allowed to go directly to this node to get back on track
							{
								new_dist = VectorDist(bot_pos, new_nodepos);
								new_node_z = VectorSet(0, 0, VectorZ(new_nodepos));
								nodeghost = CreateThingAtPos(ghost, new_nodesec, new_nodepos, '0 0 0'); // Temporary thing for the HasLOS test
								if (new_dist < dist && HasLOS(rbot, nodeghost) && (VectorDist(bot_z, new_node_z) < 0.4 || (GetThingFlags(rbot) & 0x2000000 && BitTest(new_nodeflags, 0x2000000))))
								{
									// Remember the closest node that the bot can see and is not too high for bot to reach
									path_index = new_path_id;
									node_index = i;
									nodenum = new_nodenum;
									nodepos = new_nodepos;
									nodesec = new_nodesec;
									nodesize = new_nodesize;
									nodeflags = new_nodeflags;
									dist = new_dist;
									rundir = new_path_rundir;
								}
								DestroyThing(nodeghost); // clean up
							}
						}
					}
				}

				path = SendMessageEx(path, user7, 10701051, -1, -1, -1); // iterate to next path
			}

			// If the chosen path (if any) does not require a particular run direction, pick one randomly
			if (rundir == -1)
			{
				if (Rand() > 0.5) rundir = 1; else rundir = 0;
			}
		}
		else
		{
			// Bot reached current node, needs to know where to go next
			node_index = lastposnum % path_size_max;
			path_index = (lastposnum - node_index) / path_size_max;

			path = SendMessageEx(firstpath, user7, 10703001, path_index, -1, -1); // find path by ID

			SendMessageEx(path, user7, 10703000, rbot, -1, -1);
			path_size = SendMessageEx(path, user7, 10701001, -1, -1, -1);
			pathflags = SendMessageEx(path, user7, 10701003, -1, -1, -1);
			path_rank = SendMessageEx(path, user7, 10701004, -1, -1, -1);
			rundir = SendMessageEx(path, user7, 10701005, -1, -1, -1); // Make sure bot is running in the path's required direction
			weight = SendMessageEx(path, user7, 10701006, -1, -1, -1);
			nodenum = SendMessageEx(path, user7, 10701100, node_index, -1, -1);

			// Validate bot state and make corrections if needed
			// State issues can happen after e.g. getting lost and changes in CTF game state
			if (rundir == -1)
			{
				// Current path does not have a required run direction, so keep the bot's current run direction
				if (BitTest(botmode, 0x1000)) rundir=0; else rundir=1; // set run direction from botmode
			}

			total_weight = weight;
			// If we're at either end of a non-looping path, we should change paths if we can
			if (!BitTest(pathflags, 0x2)) // Not looping
			{
				if (rundir == 1 && node_index >= (path_size - 1)) // At end of path and running forward
				{
					total_weight = 0; // Cannot stay on current path if there is another option
				}
				else if (rundir == 0 && node_index <= 0) // At beginning of path and running backward
				{
					total_weight = 0; // Cannot stay on current path if there is another option
				}
			}

			// Check for path intersections to possibly change to another path
			cur_path = path; // Remember true current path when switching between paths
			path = firstpath;
			while (path != -1)
			{
				if (path != cur_path) // This is a different path
				{
					SendMessageEx(path, user7, 10703000, rbot, -1, -1);
					new_path_id = SendMessageEx(path, user7, 10701000, -1, -1, -1);
					new_path_size = SendMessageEx(path, user7, 10701001, -1, -1, -1);
					new_path_requirements = SendMessageEx(path, user7, 10701002, -1, -1, -1);
					new_pathflags = SendMessageEx(path, user7, 10701003, -1, -1, -1);
					new_path_rank = SendMessageEx(path, user7, 10701004, -1, -1, -1);
					new_path_rundir = SendMessageEx(path, user7, 10701005, -1, -1, -1);
					new_weight = SendMessageEx(path, user7, 10701006, -1, -1, -1);

					if (!BitTest(new_pathflags, 0x4) && BitClear(new_path_requirements, bot_keys) == 0 && new_weight > 0) // Path is not disabled and bot has all the keys, etc. necessary to use this path
					{
						for (i = 0 ; i < new_path_size ; i = i + 1)
						{
							new_nodenum = SendMessageEx(path, user7, 10701100, i, -1, -1);
							if (nodenum == new_nodenum) // Same node = Intersection with the other path
							{
								// Don't switch to the end of a path going the wrong direction
								new_path_end = 0;
								if (i >= (new_path_size - 1))
								{
									if (new_path_rundir == 1) // New path requires forward movement, but we're already at the end
									{
										new_path_end = 1;
									}
									else // Not required to run forward
									{
										// The only option is to move backward
										new_path_rundir = 0;
									}
								}
								else if (i <= 0)
								{
									if (new_path_rundir == 0) // New path requires backward movement, but we're already at the beginning
									{
										new_path_end = 1;
									}
									else // Not required to run backward
									{
										// The only option is to move forward
										new_path_rundir = 1;
									}
								}

								if (!new_path_end) // We are at least one node away from the end of the path
								{
									// Evaluate whether or not to change to this path
									changepath = 0;
									if (new_path_rank > path_rank) // New path is better than the current option - we are obligated to switch
									{
										total_weight = new_weight; // Reset total weight to include only paths in this path rank
										changepath = 1;
									}
									else if (new_path_rank == path_rank) // New path is same rank as current option - change at random or if at end of current path
									{
										total_weight = total_weight + new_weight; // Add this path weight to the total
										// Each intersecting path has a chance of being chosen according to its share of the total weight of all choices
										// Giving a path more weight gives it a greater chance of being selected than paths with less weight
										// If the weights of all paths at the intersection are equal, it is effectively a 1 in N chance
										if (Rand() < (new_weight / total_weight))
										{
											changepath = 1;
										}
									}
									if (changepath)
									{
										path_index = new_path_id;
										node_index = i;
										path_size = new_path_size;
										path_rank = new_path_rank;
										rundir = new_path_rundir;
										pathflags = new_pathflags;
										i = new_path_size; // break (skip ahead to next path)
									}
								}
							}
						}
					}
				}

				path = SendMessageEx(path, user7, 10701051, -1, -1, -1); // iterate to next path
			}

			// If the path change does not require a particular run direction, pick one randomly
			if (rundir == -1)
			{
				if (Rand() > 0.5) rundir = 1; else rundir = 0;
			}

			// Prevent the bot from moving beyond either end of the path
			if (rundir == 1 && node_index >= (path_size - 1)) // At end of path and running forward
			{
				if (BitTest(pathflags, 0x2)) // For looping paths, just wrap to the beginning of the path
				{
					node_index = 0;
				}
				else // Else, the bot needs to turn around and run the other direction
				{
					rundir = 0;
				}
			}
			else if (rundir == 0 && node_index <= 0) // At beginning of path and running backward
			{
				if (BitTest(pathflags, 0x2)) // For looping paths, just wrap to the end of the path
				{
					node_index = path_size - 1;
				}
				else // Else, the bot needs to turn around and run the other direction
				{
					rundir = 1;
				}
			}

			// Advance to next node
			if (rundir)
			{
				node_index = node_index + 1; // Forward
			}
			else
			{
				node_index = node_index - 1; // Backward
			}

			path = SendMessageEx(firstpath, user7, 10703001, path_index, -1, -1); // find path by ID
			nodenum = SendMessageEx(path, user7, 10701100, node_index, -1, -1);
			x = SendMessageEx(path, user7, 10701101, node_index, -1, -1);
			y = SendMessageEx(path, user7, 10701102, node_index, -1, -1);
			z = SendMessageEx(path, user7, 10701103, node_index, -1, -1);
			nodepos = VectorSet(x, y, z);
			nodesec = SendMessageEx(path, user7, 10701104, node_index, -1, -1);
			nodesize = SendMessageEx(path, user7, 10701105, node_index, -1, -1);
			nodeflags = SendMessageEx(path, user7, 10701106, node_index, -1, -1);
		}

		// Update bot navigation state

		node = -1;
		nextposnum = -1;

		if (nodenum != -1)
		{
			if (nodesize < 0.01) // No custom node size specified, use default
			{
				nodesize = dflt_nodesize;
			}

			// Create a temporary node thing
			node = CreateThingAtPos(ghost, nodesec, nodepos, '0 0 0');
			SetThingFlags(node, nodeflags);
			SetThingCollideSize(node, nodesize);
			SetThingUserData(node, nodenum); // the placed thing number in the JKL

			// Found a node, synthesize a legacy index number to identify the path and node for later updates
			nextposnum = path_index * path_size_max + node_index;
		}

		if (node0[botid] != -1)
		{
			DestroyThing(node0[botid]);
		}
		node0[botid] = node;

		// Send navigation update to bot
		SendMessageEx(srv, user7, 10203200, node, rundir, nextposnum);
		return;
	}

	// Report error if function ID does not match anything above
	jkStringClear();
	jkStringConcatFormattedInt(GetSenderRef(), "rbot-nav.cog :: ERROR :: Cog %d");
	jkStringConcatFormattedInt(GetParam(0), " has requested an invalid function ID, %d");
	jkStringOutput(-1, -1);
	return;

end
